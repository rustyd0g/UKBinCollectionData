{"uid":"fda41916a2c60454","name":"Validate Council Output [KingstonUponThamesCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"5cc54a24c590c0c794126ca22d0562ff","time":{"start":1729037854678,"stop":1729037870534,"duration":15856},"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 16 October\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fae100063e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fae10bd79e0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:62: in parse_data\n    datetime.strptime(\n/usr/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 16 October\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 16 October\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/usr/lib/python3.12/_strptime.py:333: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'Wednesday, 16 October\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7fae100063e0>\nrequest = <FixtureRequest for <Function test_scenario_outline[KingstonUponThamesCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fae10bd79e0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/KingstonUponThamesCouncil.py:62: in parse_data\n    datetime.strptime(\n/usr/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'Wednesday, 16 October\\n              \\n              \\n              (In progress) 2024'\nformat = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'Wednesday, 16 October\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n\n/usr/lib/python3.12/_strptime.py:333: ValueError","steps":[{"name":"Given the council","time":{"start":1729037854678,"stop":1729037854679,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1729037854679,"stop":1729037870534,"duration":15855},"status":"failed","statusMessage":"time data 'Wednesday, 16 October\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'Wednesday, 16 October\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"82ab19092e7fd216","name":"stdout","source":"82ab19092e7fd216.txt","type":"text/plain","size":208}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1768-549"},{"name":"thread","value":"2945-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"KingstonUponThamesCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":27,"broken":0,"skipped":0,"passed":146,"unknown":0,"total":173},"items":[{"uid":"288d7cac740892b7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2233//#testresult/288d7cac740892b7","status":"passed","time":{"start":1728951577489,"stop":1728951608001,"duration":30512}},{"uid":"831790215a43eef9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2227//#testresult/831790215a43eef9","status":"passed","time":{"start":1728865075210,"stop":1728865110698,"duration":35488}},{"uid":"10d0d1cc99f91c7f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2214//#testresult/10d0d1cc99f91c7f","status":"passed","time":{"start":1728778487322,"stop":1728778591139,"duration":103817}},{"uid":"2f582c17eeaaa4ef","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2211//#testresult/2f582c17eeaaa4ef","status":"passed","time":{"start":1728692122251,"stop":1728692216052,"duration":93801}},{"uid":"296cc4002eb777a8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2210//#testresult/296cc4002eb777a8","status":"passed","time":{"start":1728605720798,"stop":1728605747700,"duration":26902}},{"uid":"45fac08870d85e79","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2199//#testresult/45fac08870d85e79","status":"passed","time":{"start":1728519325149,"stop":1728519409683,"duration":84534}},{"uid":"b4240f181b0ebac9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2188//#testresult/b4240f181b0ebac9","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 9 October\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1728433188711,"stop":1728433269719,"duration":81008}},{"uid":"8a8dd61e579e41bc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2169//#testresult/8a8dd61e579e41bc","status":"passed","time":{"start":1728332922210,"stop":1728332944085,"duration":21875}},{"uid":"8fadb6a010618dce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2165//#testresult/8fadb6a010618dce","status":"passed","time":{"start":1728260249203,"stop":1728260348519,"duration":99316}},{"uid":"2729413cb124a61d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2164//#testresult/2729413cb124a61d","status":"passed","time":{"start":1728173276137,"stop":1728173360372,"duration":84235}},{"uid":"6528430469b5b094","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2160//#testresult/6528430469b5b094","status":"passed","time":{"start":1728086736138,"stop":1728086786456,"duration":50318}},{"uid":"4a2b95a104f25864","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2152//#testresult/4a2b95a104f25864","status":"passed","time":{"start":1728000325219,"stop":1728000426501,"duration":101282}},{"uid":"ce6cf09ef380b800","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2148//#testresult/ce6cf09ef380b800","status":"passed","time":{"start":1727932631904,"stop":1727932654663,"duration":22759}},{"uid":"aa752ecd2812e6eb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2146//#testresult/aa752ecd2812e6eb","status":"passed","time":{"start":1727914477050,"stop":1727914514479,"duration":37429}},{"uid":"ad907be965115b78","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2139//#testresult/ad907be965115b78","status":"failed","statusDetails":"ValueError: time data 'Wednesday, 2 October\\n              \\n              \\n              (In progress) 2024' does not match format '%A, %d %B %Y'","time":{"start":1727827975763,"stop":1727828007799,"duration":32036}},{"uid":"66f44e09160aa3b9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2138//#testresult/66f44e09160aa3b9","status":"passed","time":{"start":1727741611526,"stop":1727741655415,"duration":43889}},{"uid":"e8267541fdfe10d5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2137//#testresult/e8267541fdfe10d5","status":"passed","time":{"start":1727655230841,"stop":1727655265051,"duration":34210}},{"uid":"fdfd7e9bdf77ce50","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2136//#testresult/fdfd7e9bdf77ce50","status":"passed","time":{"start":1727568903771,"stop":1727568973255,"duration":69484}},{"uid":"e0c5cb13a21cd757","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2135//#testresult/e0c5cb13a21cd757","status":"passed","time":{"start":1727482422526,"stop":1727482505590,"duration":83064}},{"uid":"94b29c060961d82e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2131//#testresult/94b29c060961d82e","status":"passed","time":{"start":1727422338105,"stop":1727422359000,"duration":20895}}]},"tags":[]},"source":"fda41916a2c60454.json","parameterValues":["KingstonUponThamesCouncil"]}