{"uid":"c5477a7a6d413107","name":"Validate Council Output [GatesheadCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"3a7171e6de629587a3f0d32410302b35","time":{"start":1729037953781,"stop":1729038273413,"duration":319632},"status":"failed","statusMessage":"selenium.common.exceptions.WebDriverException: Message: Unable to route (DELETE) /session/5e234789db5477fb935a569993901181","statusTrace":"self = <GatesheadCouncil.CouncilClass object at 0x7f454b9a2780>, page = ''\nkwargs = {'council_module_str': 'GatesheadCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ndriver = <selenium.webdriver.remote.webdriver.WebDriver (session=\"5e234789db5477fb935a569993901181\")>\ndata = {'bins': []}, user_paon = 'Bracken Cottage', user_postcode = 'NE16 5LQ'\nweb_driver = 'http://localhost:4444', headless = True\naccept_button = <selenium.webdriver.remote.webelement.WebElement (session=\"5e234789db5477fb935a569993901181\", element=\"f.1E1327286DF452DC16C63BD8BB03D1DE.d.1EBFAFEBBC351B908533AB7AD068047B.e.60\")>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        driver = None\n        try:\n            data = {\"bins\": []}\n            user_paon = kwargs.get(\"paon\")\n            user_postcode = kwargs.get(\"postcode\")\n            web_driver = kwargs.get(\"web_driver\")\n            headless = kwargs.get(\"headless\")\n            check_paon(user_paon)\n            check_postcode(user_postcode)\n    \n            # Create Selenium webdriver\n            driver = create_webdriver(web_driver, headless, None, __name__)\n            driver.get(\n                \"https://www.gateshead.gov.uk/article/3150/Bin-collection-day-checker\"\n            )\n    \n            accept_button = WebDriverWait(driver, 30).until(\n                EC.presence_of_element_located((By.NAME, \"acceptall\"))\n            )\n            accept_button.click()\n    \n            # Wait for the postcode field to appear then populate it\n            inputElement_postcode = WebDriverWait(driver, 30).until(\n                EC.presence_of_element_located(\n                    (By.ID, \"BINCOLLECTIONCHECKER_ADDRESSSEARCH_ADDRESSLOOKUPPOSTCODE\")\n                )\n            )\n            inputElement_postcode.send_keys(user_postcode)\n    \n            # Click search button\n            findAddress = WebDriverWait(driver, 10).until(\n                EC.presence_of_element_located(\n                    (By.ID, \"BINCOLLECTIONCHECKER_ADDRESSSEARCH_ADDRESSLOOKUPSEARCH\")\n                )\n            )\n            findAddress.click()\n    \n            # Wait for the 'Select address' dropdown to appear and select option matching the house name/number\n            WebDriverWait(driver, 10).until(\n                EC.element_to_be_clickable(\n                    (\n                        By.XPATH,\n                        \"//select[@id='BINCOLLECTIONCHECKER_ADDRESSSEARCH_ADDRESSLOOKUPADDRESS']//option[contains(., '\"\n                        + user_paon\n                        + \"')]\",\n                    )\n                )\n>           ).click()\n\nuk_bin_collection/uk_bin_collection/councils/GatesheadCouncil.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f454b220b60>\nresponse = {'status': 500, 'value': '{\\n  \"value\": {\\n    \"stacktrace\": \"java.lang.RuntimeException: Unable to execute request fo...'amd64\\', os.version: \\'6.8.0-1015-azure\\', java.version: \\'17.0.12\\'\\\\nDriver info: driver.version: unknown\"\\n  }\\n}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Unable to execute request for an existing session: java.util.concurrent.TimeoutException\nE       Build info: version: '4.25.0', revision: '030fcf7918'\nE       System info: os.name: 'Linux', os.arch: 'amd64', os.version: '6.8.0-1015-azure', java.version: '17.0.12'\nE       Driver info: driver.version: unknown\nE       Stacktrace:\nE       java.lang.RuntimeException: Unable to execute request for an existing session: java.util.concurrent.TimeoutException\nE       Build info: version: '4.25.0', revision: '030fcf7918'\nE       System info: os.name: 'Linux', os.arch: 'amd64', os.version: '6.8.0-1015-azure', java.version: '17.0.12'\nE       Driver info: driver.version: unknown\nE       \tat org.openqa.selenium.grid.router.HandleSession.execute(HandleSession.java:208)\nE       \tat org.openqa.selenium.remote.http.Route$PredicatedRoute.handle(Route.java:397)\nE       \tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\nE       \tat org.openqa.selenium.remote.http.Route$CombinedRoute.handle(Route.java:360)\nE       \tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\nE       \tat org.openqa.selenium.grid.router.Router.execute(Router.java:87)\nE       \tat org.openqa.selenium.grid.web.EnsureSpecCompliantResponseHeaders.lambda$apply$0(EnsureSpecCompliantResponseHeaders.java:34)\nE       \tat org.openqa.selenium.remote.http.Filter$1.execute(Filter.java:63)\nE       \tat org.openqa.selenium.remote.http.Route$CombinedRoute.handle(Route.java:360)\nE       \tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\nE       \tat org.openqa.selenium.remote.AddWebDriverSpecHeaders.lambda$apply$0(AddWebDriverSpecHeaders.java:35)\nE       \tat org.openqa.selenium.remote.ErrorFilter.lambda$apply$0(ErrorFilter.java:44)\nE       \tat org.openqa.selenium.remote.http.Filter$1.execute(Filter.java:63)\nE       \tat org.openqa.selenium.remote.ErrorFilter.lambda$apply$0(ErrorFilter.java:44)\nE       \tat org.openqa.selenium.remote.http.Filter$1.execute(Filter.java:63)\nE       \tat org.openqa.selenium.netty.server.SeleniumHandler.lambda$channelRead0$0(SeleniumHandler.java:44)\nE       \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\nE       \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\nE       \tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\nE       \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\nE       \tat java.base/java.lang.Thread.run(Thread.java:840)\nE       Caused by: java.util.concurrent.TimeoutException\nE       \tat java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)\nE       \tat java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)\nE       \tat org.openqa.selenium.remote.http.jdk.JdkHttpClient.execute0(JdkHttpClient.java:401)\nE       \tat org.openqa.selenium.remote.http.AddSeleniumUserAgent.lambda$apply$0(AddSeleniumUserAgent.java:42)\nE       \tat org.openqa.selenium.remote.http.Filter.lambda$andFinally$1(Filter.java:55)\nE       \tat org.openqa.selenium.remote.http.jdk.JdkHttpClient.execute(JdkHttpClient.java:374)\nE       \tat org.openqa.selenium.remote.tracing.TracedHttpClient.execute(TracedHttpClient.java:54)\nE       \tat org.openqa.selenium.grid.web.ReverseProxyHandler.execute(ReverseProxyHandler.java:90)\nE       \tat org.openqa.selenium.grid.node.DefaultActiveSession.execute(DefaultActiveSession.java:62)\nE       \tat org.openqa.selenium.grid.node.local.SessionSlot.execute(SessionSlot.java:126)\nE       \tat org.openqa.selenium.grid.node.local.LocalNode.executeWebDriverCommand(LocalNode.java:633)\nE       \tat org.openqa.selenium.grid.node.ForwardWebDriverCommand.execute(ForwardWebDriverCommand.java:35)\nE       \tat org.openqa.selenium.remote.http.Route$PredicatedRoute.handle(Route.java:397)\nE       \tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\nE       \tat org.openqa.selenium.remote.tracing.SpanWrappedHttpHandler.execute(SpanWrappedHttpHandler.java:87)\nE       \tat org.openqa.selenium.remote.http.Filter$1.execute(Filter.java:63)\nE       \tat org.openqa.selenium.remote.http.Route$CombinedRoute.handle(Route.java:360)\nE       \tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\nE       \tat org.openqa.selenium.grid.node.Node.execute(Node.java:270)\nE       \tat org.openqa.selenium.grid.web.CombinedHandler.execute(CombinedHandler.java:55)\nE       \tat org.openqa.selenium.grid.web.RoutableHttpClientFactory$1.execute(RoutableHttpClientFactory.java:71)\nE       \tat org.openqa.selenium.grid.web.ReverseProxyHandler.execute(ReverseProxyHandler.java:90)\nE       \tat org.openqa.selenium.grid.router.HandleSession.execute(HandleSession.java:181)\nE       \t... 20 more\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function scrape_step at 0x7f454bfbd8a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GatesheadCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f454cc544a0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/GatesheadCouncil.py:115: in parse_data\n    driver.quit()\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:476: in quit\n    self.execute(Command.QUIT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f454b220b60>\nresponse = {'status': 404, 'value': '{\\n  \"value\": \"\\\\u002fsession\\\\u002f5e234789db5477fb935a569993901181\",\\n  \"message\": \"Unable...002fsession\\\\u002f5e234789db5477fb935a569993901181\",\\n  \"error\": \"org.openqa.selenium.UnsupportedCommandException\"\\n}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Unable to route (DELETE) /session/5e234789db5477fb935a569993901181\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.WebDriverException: Message: Unable to route (DELETE) /session/5e234789db5477fb935a569993901181","statusTrace":"self = <GatesheadCouncil.CouncilClass object at 0x7f454b9a2780>, page = ''\nkwargs = {'council_module_str': 'GatesheadCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ndriver = <selenium.webdriver.remote.webdriver.WebDriver (session=\"5e234789db5477fb935a569993901181\")>\ndata = {'bins': []}, user_paon = 'Bracken Cottage', user_postcode = 'NE16 5LQ'\nweb_driver = 'http://localhost:4444', headless = True\naccept_button = <selenium.webdriver.remote.webelement.WebElement (session=\"5e234789db5477fb935a569993901181\", element=\"f.1E1327286DF452DC16C63BD8BB03D1DE.d.1EBFAFEBBC351B908533AB7AD068047B.e.60\")>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        driver = None\n        try:\n            data = {\"bins\": []}\n            user_paon = kwargs.get(\"paon\")\n            user_postcode = kwargs.get(\"postcode\")\n            web_driver = kwargs.get(\"web_driver\")\n            headless = kwargs.get(\"headless\")\n            check_paon(user_paon)\n            check_postcode(user_postcode)\n    \n            # Create Selenium webdriver\n            driver = create_webdriver(web_driver, headless, None, __name__)\n            driver.get(\n                \"https://www.gateshead.gov.uk/article/3150/Bin-collection-day-checker\"\n            )\n    \n            accept_button = WebDriverWait(driver, 30).until(\n                EC.presence_of_element_located((By.NAME, \"acceptall\"))\n            )\n            accept_button.click()\n    \n            # Wait for the postcode field to appear then populate it\n            inputElement_postcode = WebDriverWait(driver, 30).until(\n                EC.presence_of_element_located(\n                    (By.ID, \"BINCOLLECTIONCHECKER_ADDRESSSEARCH_ADDRESSLOOKUPPOSTCODE\")\n                )\n            )\n            inputElement_postcode.send_keys(user_postcode)\n    \n            # Click search button\n            findAddress = WebDriverWait(driver, 10).until(\n                EC.presence_of_element_located(\n                    (By.ID, \"BINCOLLECTIONCHECKER_ADDRESSSEARCH_ADDRESSLOOKUPSEARCH\")\n                )\n            )\n            findAddress.click()\n    \n            # Wait for the 'Select address' dropdown to appear and select option matching the house name/number\n            WebDriverWait(driver, 10).until(\n                EC.element_to_be_clickable(\n                    (\n                        By.XPATH,\n                        \"//select[@id='BINCOLLECTIONCHECKER_ADDRESSSEARCH_ADDRESSLOOKUPADDRESS']//option[contains(., '\"\n                        + user_paon\n                        + \"')]\",\n                    )\n                )\n>           ).click()\n\nuk_bin_collection/uk_bin_collection/councils/GatesheadCouncil.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f454b220b60>\nresponse = {'status': 500, 'value': '{\\n  \"value\": {\\n    \"stacktrace\": \"java.lang.RuntimeException: Unable to execute request fo...'amd64\\', os.version: \\'6.8.0-1015-azure\\', java.version: \\'17.0.12\\'\\\\nDriver info: driver.version: unknown\"\\n  }\\n}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Unable to execute request for an existing session: java.util.concurrent.TimeoutException\nE       Build info: version: '4.25.0', revision: '030fcf7918'\nE       System info: os.name: 'Linux', os.arch: 'amd64', os.version: '6.8.0-1015-azure', java.version: '17.0.12'\nE       Driver info: driver.version: unknown\nE       Stacktrace:\nE       java.lang.RuntimeException: Unable to execute request for an existing session: java.util.concurrent.TimeoutException\nE       Build info: version: '4.25.0', revision: '030fcf7918'\nE       System info: os.name: 'Linux', os.arch: 'amd64', os.version: '6.8.0-1015-azure', java.version: '17.0.12'\nE       Driver info: driver.version: unknown\nE       \tat org.openqa.selenium.grid.router.HandleSession.execute(HandleSession.java:208)\nE       \tat org.openqa.selenium.remote.http.Route$PredicatedRoute.handle(Route.java:397)\nE       \tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\nE       \tat org.openqa.selenium.remote.http.Route$CombinedRoute.handle(Route.java:360)\nE       \tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\nE       \tat org.openqa.selenium.grid.router.Router.execute(Router.java:87)\nE       \tat org.openqa.selenium.grid.web.EnsureSpecCompliantResponseHeaders.lambda$apply$0(EnsureSpecCompliantResponseHeaders.java:34)\nE       \tat org.openqa.selenium.remote.http.Filter$1.execute(Filter.java:63)\nE       \tat org.openqa.selenium.remote.http.Route$CombinedRoute.handle(Route.java:360)\nE       \tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\nE       \tat org.openqa.selenium.remote.AddWebDriverSpecHeaders.lambda$apply$0(AddWebDriverSpecHeaders.java:35)\nE       \tat org.openqa.selenium.remote.ErrorFilter.lambda$apply$0(ErrorFilter.java:44)\nE       \tat org.openqa.selenium.remote.http.Filter$1.execute(Filter.java:63)\nE       \tat org.openqa.selenium.remote.ErrorFilter.lambda$apply$0(ErrorFilter.java:44)\nE       \tat org.openqa.selenium.remote.http.Filter$1.execute(Filter.java:63)\nE       \tat org.openqa.selenium.netty.server.SeleniumHandler.lambda$channelRead0$0(SeleniumHandler.java:44)\nE       \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\nE       \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\nE       \tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\nE       \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\nE       \tat java.base/java.lang.Thread.run(Thread.java:840)\nE       Caused by: java.util.concurrent.TimeoutException\nE       \tat java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)\nE       \tat java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)\nE       \tat org.openqa.selenium.remote.http.jdk.JdkHttpClient.execute0(JdkHttpClient.java:401)\nE       \tat org.openqa.selenium.remote.http.AddSeleniumUserAgent.lambda$apply$0(AddSeleniumUserAgent.java:42)\nE       \tat org.openqa.selenium.remote.http.Filter.lambda$andFinally$1(Filter.java:55)\nE       \tat org.openqa.selenium.remote.http.jdk.JdkHttpClient.execute(JdkHttpClient.java:374)\nE       \tat org.openqa.selenium.remote.tracing.TracedHttpClient.execute(TracedHttpClient.java:54)\nE       \tat org.openqa.selenium.grid.web.ReverseProxyHandler.execute(ReverseProxyHandler.java:90)\nE       \tat org.openqa.selenium.grid.node.DefaultActiveSession.execute(DefaultActiveSession.java:62)\nE       \tat org.openqa.selenium.grid.node.local.SessionSlot.execute(SessionSlot.java:126)\nE       \tat org.openqa.selenium.grid.node.local.LocalNode.executeWebDriverCommand(LocalNode.java:633)\nE       \tat org.openqa.selenium.grid.node.ForwardWebDriverCommand.execute(ForwardWebDriverCommand.java:35)\nE       \tat org.openqa.selenium.remote.http.Route$PredicatedRoute.handle(Route.java:397)\nE       \tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\nE       \tat org.openqa.selenium.remote.tracing.SpanWrappedHttpHandler.execute(SpanWrappedHttpHandler.java:87)\nE       \tat org.openqa.selenium.remote.http.Filter$1.execute(Filter.java:63)\nE       \tat org.openqa.selenium.remote.http.Route$CombinedRoute.handle(Route.java:360)\nE       \tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\nE       \tat org.openqa.selenium.grid.node.Node.execute(Node.java:270)\nE       \tat org.openqa.selenium.grid.web.CombinedHandler.execute(CombinedHandler.java:55)\nE       \tat org.openqa.selenium.grid.web.RoutableHttpClientFactory$1.execute(RoutableHttpClientFactory.java:71)\nE       \tat org.openqa.selenium.grid.web.ReverseProxyHandler.execute(ReverseProxyHandler.java:90)\nE       \tat org.openqa.selenium.grid.router.HandleSession.execute(HandleSession.java:181)\nE       \t... 20 more\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function scrape_step at 0x7f454bfbd8a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GatesheadCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f454cc544a0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/GatesheadCouncil.py:115: in parse_data\n    driver.quit()\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:476: in quit\n    self.execute(Command.QUIT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f454b220b60>\nresponse = {'status': 404, 'value': '{\\n  \"value\": \"\\\\u002fsession\\\\u002f5e234789db5477fb935a569993901181\",\\n  \"message\": \"Unable...002fsession\\\\u002f5e234789db5477fb935a569993901181\",\\n  \"error\": \"org.openqa.selenium.UnsupportedCommandException\"\\n}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Unable to route (DELETE) /session/5e234789db5477fb935a569993901181\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","steps":[{"name":"Given the council","time":{"start":1729037953781,"stop":1729037953782,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1729037953782,"stop":1729038273413,"duration":319631},"status":"failed","statusMessage":"Message: Unable to route (DELETE) /session/5e234789db5477fb935a569993901181\n","statusTrace":"selenium.common.exceptions.WebDriverException: Message: Unable to route (DELETE) /session/5e234789db5477fb935a569993901181\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"9dde926ed71cbc25","name":"stdout","source":"9dde926ed71cbc25.txt","type":"text/plain","size":4379}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1768-549"},{"name":"thread","value":"2954-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GatesheadCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":165,"broken":0,"skipped":0,"passed":9,"unknown":0,"total":174},"items":[{"uid":"df3c823fb40cbd26","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2233//#testresult/df3c823fb40cbd26","status":"failed","statusDetails":"selenium.common.exceptions.WebDriverException: Message: Unable to route (DELETE) /session/4e533642131e559c23262a208c1ba788","time":{"start":1728951686005,"stop":1728952010055,"duration":324050}},{"uid":"a1667c79524ee5cc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2227//#testresult/a1667c79524ee5cc","status":"passed","time":{"start":1728865191628,"stop":1728865225390,"duration":33762}},{"uid":"570fedc8245fa7a4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2214//#testresult/570fedc8245fa7a4","status":"passed","time":{"start":1728778561608,"stop":1728778621370,"duration":59762}},{"uid":"3fbcf8c289468374","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2211//#testresult/3fbcf8c289468374","status":"failed","statusDetails":"selenium.common.exceptions.WebDriverException: Message: Unable to route (DELETE) /session/26bd0479eca5a7a95e7c152c208d6a4f","time":{"start":1728692202266,"stop":1728692548473,"duration":346207}},{"uid":"bc219595457e542f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2210//#testresult/bc219595457e542f","status":"passed","time":{"start":1728605815123,"stop":1728605855053,"duration":39930}},{"uid":"467c88148a9b1350","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2199//#testresult/467c88148a9b1350","status":"passed","time":{"start":1728519403091,"stop":1728519450000,"duration":46909}},{"uid":"ab6223960e5136cc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2188//#testresult/ab6223960e5136cc","status":"passed","time":{"start":1728432860298,"stop":1728432927156,"duration":66858}},{"uid":"e6e161dddb399091","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2169//#testresult/e6e161dddb399091","status":"passed","time":{"start":1728332046594,"stop":1728332169181,"duration":122587}},{"uid":"41b1dd56015c53f0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2165//#testresult/41b1dd56015c53f0","status":"failed","statusDetails":"selenium.common.exceptions.WebDriverException: Message: Unable to route (DELETE) /session/6259e899dab306f4d8a70bb0811b55d3","time":{"start":1728260422429,"stop":1728260780223,"duration":357794}},{"uid":"44168e07a6b4e355","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2164//#testresult/44168e07a6b4e355","status":"passed","time":{"start":1728174116381,"stop":1728174168009,"duration":51628}},{"uid":"d424c5a89f0d9377","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2160//#testresult/d424c5a89f0d9377","status":"passed","time":{"start":1728087335578,"stop":1728087358944,"duration":23366}},{"uid":"5683a2a78ae40f66","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2157//#testresult/5683a2a78ae40f66","status":"passed","time":{"start":1728057195699,"stop":1728057202991,"duration":7292}},{"uid":"51122884809752ed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2152//#testresult/51122884809752ed","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55c3a025213a <unknown>\n#1 0x55c39ff385e0 <unknown>\n#2 0x55c39ff87be8 <unknown>\n#3 0x55c39ff87e81 <unknown>\n#4 0x55c39ffce8c4 <unknown>\n#5 0x55c39ffacb4d <unknown>\n#6 0x55c39ffcbd7d <unknown>\n#7 0x55c39ffac8c3 <unknown>\n#8 0x55c39ff7a6b3 <unknown>\n#9 0x55c39ff7b68e <unknown>\n#10 0x55c3a021cb3b <unknown>\n#11 0x55c3a0220ac1 <unknown>\n#12 0x55c3a0209335 <unknown>\n#13 0x55c3a0221642 <unknown>\n#14 0x55c3a01ee49f <unknown>\n#15 0x55c3a0241038 <unknown>\n#16 0x55c3a0241203 <unknown>\n#17 0x55c3a0250f8c <unknown>\n#18 0x7f3ff87c8a94 <unknown>\n#19 0x7f3ff8855a34 __clone","time":{"start":1728001206617,"stop":1728001279131,"duration":72514}},{"uid":"b85cd9489237bd4b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2148//#testresult/b85cd9489237bd4b","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x559d0431713a <unknown>\n#1 0x559d03ffd5e0 <unknown>\n#2 0x559d0404cbe8 <unknown>\n#3 0x559d0404ce81 <unknown>\n#4 0x559d040938c4 <unknown>\n#5 0x559d04071b4d <unknown>\n#6 0x559d04090d7d <unknown>\n#7 0x559d040718c3 <unknown>\n#8 0x559d0403f6b3 <unknown>\n#9 0x559d0404068e <unknown>\n#10 0x559d042e1b3b <unknown>\n#11 0x559d042e5ac1 <unknown>\n#12 0x559d042ce335 <unknown>\n#13 0x559d042e6642 <unknown>\n#14 0x559d042b349f <unknown>\n#15 0x559d04306038 <unknown>\n#16 0x559d04306203 <unknown>\n#17 0x559d04315f8c <unknown>\n#18 0x7f1571635a94 <unknown>\n#19 0x7f15716c2a34 __clone","time":{"start":1727932720498,"stop":1727932812978,"duration":92480}},{"uid":"f8eb661695e3df68","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2146//#testresult/f8eb661695e3df68","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x562d1cfbb13a <unknown>\n#1 0x562d1cca15e0 <unknown>\n#2 0x562d1ccf0be8 <unknown>\n#3 0x562d1ccf0e81 <unknown>\n#4 0x562d1cd378c4 <unknown>\n#5 0x562d1cd15b4d <unknown>\n#6 0x562d1cd34d7d <unknown>\n#7 0x562d1cd158c3 <unknown>\n#8 0x562d1cce36b3 <unknown>\n#9 0x562d1cce468e <unknown>\n#10 0x562d1cf85b3b <unknown>\n#11 0x562d1cf89ac1 <unknown>\n#12 0x562d1cf72335 <unknown>\n#13 0x562d1cf8a642 <unknown>\n#14 0x562d1cf5749f <unknown>\n#15 0x562d1cfaa038 <unknown>\n#16 0x562d1cfaa203 <unknown>\n#17 0x562d1cfb9f8c <unknown>\n#18 0x7fba58f05a94 <unknown>\n#19 0x7fba58f92a34 __clone","time":{"start":1727914532560,"stop":1727914626745,"duration":94185}},{"uid":"4fe43488d620820e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2139//#testresult/4fe43488d620820e","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5635432c613a <unknown>\n#1 0x563542fac5e0 <unknown>\n#2 0x563542ffbbe8 <unknown>\n#3 0x563542ffbe81 <unknown>\n#4 0x5635430428c4 <unknown>\n#5 0x563543020b4d <unknown>\n#6 0x56354303fd7d <unknown>\n#7 0x5635430208c3 <unknown>\n#8 0x563542fee6b3 <unknown>\n#9 0x563542fef68e <unknown>\n#10 0x563543290b3b <unknown>\n#11 0x563543294ac1 <unknown>\n#12 0x56354327d335 <unknown>\n#13 0x563543295642 <unknown>\n#14 0x56354326249f <unknown>\n#15 0x5635432b5038 <unknown>\n#16 0x5635432b5203 <unknown>\n#17 0x5635432c4f8c <unknown>\n#18 0x7f8d86012a94 <unknown>\n#19 0x7f8d8609fa34 __clone","time":{"start":1727828081301,"stop":1727828175614,"duration":94313}},{"uid":"53443bed23ab756e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2138//#testresult/53443bed23ab756e","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55ce6e30013a <unknown>\n#1 0x55ce6dfe65e0 <unknown>\n#2 0x55ce6e035be8 <unknown>\n#3 0x55ce6e035e81 <unknown>\n#4 0x55ce6e07c8c4 <unknown>\n#5 0x55ce6e05ab4d <unknown>\n#6 0x55ce6e079d7d <unknown>\n#7 0x55ce6e05a8c3 <unknown>\n#8 0x55ce6e0286b3 <unknown>\n#9 0x55ce6e02968e <unknown>\n#10 0x55ce6e2cab3b <unknown>\n#11 0x55ce6e2ceac1 <unknown>\n#12 0x55ce6e2b7335 <unknown>\n#13 0x55ce6e2cf642 <unknown>\n#14 0x55ce6e29c49f <unknown>\n#15 0x55ce6e2ef038 <unknown>\n#16 0x55ce6e2ef203 <unknown>\n#17 0x55ce6e2fef8c <unknown>\n#18 0x7fa19503ca94 <unknown>\n#19 0x7fa1950c9a34 __clone","time":{"start":1727741720383,"stop":1727741814794,"duration":94411}},{"uid":"29803f3552156c9a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2137//#testresult/29803f3552156c9a","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5622078df13a <unknown>\n#1 0x5622075c55e0 <unknown>\n#2 0x562207614be8 <unknown>\n#3 0x562207614e81 <unknown>\n#4 0x56220765b8c4 <unknown>\n#5 0x562207639b4d <unknown>\n#6 0x562207658d7d <unknown>\n#7 0x5622076398c3 <unknown>\n#8 0x5622076076b3 <unknown>\n#9 0x56220760868e <unknown>\n#10 0x5622078a9b3b <unknown>\n#11 0x5622078adac1 <unknown>\n#12 0x562207896335 <unknown>\n#13 0x5622078ae642 <unknown>\n#14 0x56220787b49f <unknown>\n#15 0x5622078ce038 <unknown>\n#16 0x5622078ce203 <unknown>\n#17 0x5622078ddf8c <unknown>\n#18 0x7fcb29556a94 <unknown>\n#19 0x7fcb295e3a34 __clone","time":{"start":1727655331421,"stop":1727655430829,"duration":99408}},{"uid":"a0e582f1eca3c4c0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2136//#testresult/a0e582f1eca3c4c0","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55962eb8a13a <unknown>\n#1 0x55962e8705e0 <unknown>\n#2 0x55962e8bfbe8 <unknown>\n#3 0x55962e8bfe81 <unknown>\n#4 0x55962e9068c4 <unknown>\n#5 0x55962e8e4b4d <unknown>\n#6 0x55962e903d7d <unknown>\n#7 0x55962e8e48c3 <unknown>\n#8 0x55962e8b26b3 <unknown>\n#9 0x55962e8b368e <unknown>\n#10 0x55962eb54b3b <unknown>\n#11 0x55962eb58ac1 <unknown>\n#12 0x55962eb41335 <unknown>\n#13 0x55962eb59642 <unknown>\n#14 0x55962eb2649f <unknown>\n#15 0x55962eb79038 <unknown>\n#16 0x55962eb79203 <unknown>\n#17 0x55962eb88f8c <unknown>\n#18 0x7fba51f11a94 <unknown>\n#19 0x7fba51f9ea34 __clone","time":{"start":1727568828654,"stop":1727568890548,"duration":61894}},{"uid":"328675428a944d55","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2135//#testresult/328675428a944d55","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x557306bb613a <unknown>\n#1 0x55730689c5e0 <unknown>\n#2 0x5573068ebbe8 <unknown>\n#3 0x5573068ebe81 <unknown>\n#4 0x5573069328c4 <unknown>\n#5 0x557306910b4d <unknown>\n#6 0x55730692fd7d <unknown>\n#7 0x5573069108c3 <unknown>\n#8 0x5573068de6b3 <unknown>\n#9 0x5573068df68e <unknown>\n#10 0x557306b80b3b <unknown>\n#11 0x557306b84ac1 <unknown>\n#12 0x557306b6d335 <unknown>\n#13 0x557306b85642 <unknown>\n#14 0x557306b5249f <unknown>\n#15 0x557306ba5038 <unknown>\n#16 0x557306ba5203 <unknown>\n#17 0x557306bb4f8c <unknown>\n#18 0x7ffb53bc3a94 <unknown>\n#19 0x7ffb53c50a34 __clone","time":{"start":1727482495818,"stop":1727482580033,"duration":84215}}]},"tags":[]},"source":"c5477a7a6d413107.json","parameterValues":["GatesheadCouncil"]}