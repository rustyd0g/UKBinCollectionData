{"uid":"dbf4efc15daa068e","name":"Validate Council Output [ArunCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"2e4939752909902d639a9d2cf81e27c1","time":{"start":1728691271146,"stop":1728691571175,"duration":300029},"status":"failed","statusMessage":"UnboundLocalError: cannot access local variable 'driver' where it is not associated with a value","statusTrace":"self = <ArunCouncil.CouncilClass object at 0x7fa1b80d62d0>, page = ''\nkwargs = {'council_module_str': 'ArunCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ndata = {'bins': []}, user_paon = '1', user_postcode = 'BN16 4DA'\nheadless = True, web_driver = 'http://localhost:4444'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        try:\n            # Make a BS4 object\n            data = {\"bins\": []}\n    \n            user_paon = kwargs.get(\"paon\")\n            user_postcode = kwargs.get(\"postcode\")\n            headless = kwargs.get(\"headless\")\n            web_driver = kwargs.get(\"web_driver\")\n>           driver = create_webdriver(web_driver, headless, None, __name__)\n\nuk_bin_collection/uk_bin_collection/councils/ArunCouncil.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/uk_bin_collection/common.py:323: in create_webdriver\n    return webdriver.Remote(command_executor=web_driver, options=options)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:212: in __init__\n    self.start_session(capabilities)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:299: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa1a60340b0>\nresponse = {'status': 500, 'value': '{\\n  \"value\": {\\n    \"error\": \"session not created\",\\n    \"message\": \"Could not start a new ...\"className\": \"java.lang.Thread\",\\n        \"lineNumber\": 840,\\n        \"classLoaderName\": null\\n      }\\n    ]\\n  }\\n}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: Could not start a new session. New session request timed out \nE       Host info: host: 'selenium', ip: '172.18.0.2'\nE       Build info: version: '4.25.0', revision: '030fcf7918'\nE       System info: os.name: 'Linux', os.arch: 'amd64', os.version: '6.5.0-1025-azure', java.version: '17.0.12'\nE       Driver info: driver.version: unknown\nE       Stacktrace:\nE           at org.openqa.selenium.grid.sessionqueue.local.LocalNewSessionQueue.addToQueue (LocalNewSessionQueue.java:221)\nE           at org.openqa.selenium.grid.sessionqueue.NewSessionQueue.lambda$new$0 (NewSessionQueue.java:68)\nE           at org.openqa.selenium.remote.http.Route$TemplatizedRoute.handle (Route.java:192)\nE           at org.openqa.selenium.remote.http.Route.execute (Route.java:69)\nE           at org.openqa.selenium.remote.http.Route$CombinedRoute.handle (Route.java:360)\nE           at org.openqa.selenium.remote.http.Route.execute (Route.java:69)\nE           at org.openqa.selenium.grid.sessionqueue.NewSessionQueue.execute (NewSessionQueue.java:128)\nE           at org.openqa.selenium.remote.tracing.SpanWrappedHttpHandler.execute (SpanWrappedHttpHandler.java:87)\nE           at org.openqa.selenium.remote.http.Filter$1.execute (Filter.java:63)\nE           at org.openqa.selenium.remote.http.Route$CombinedRoute.handle (Route.java:360)\nE           at org.openqa.selenium.remote.http.Route.execute (Route.java:69)\nE           at org.openqa.selenium.grid.router.Router.execute (Router.java:87)\nE           at org.openqa.selenium.grid.web.EnsureSpecCompliantResponseHeaders.lambda$apply$0 (EnsureSpecCompliantResponseHeaders.java:34)\nE           at org.openqa.selenium.remote.http.Filter$1.execute (Filter.java:63)\nE           at org.openqa.selenium.remote.http.Route$CombinedRoute.handle (Route.java:360)\nE           at org.openqa.selenium.remote.http.Route.execute (Route.java:69)\nE           at org.openqa.selenium.remote.AddWebDriverSpecHeaders.lambda$apply$0 (AddWebDriverSpecHeaders.java:35)\nE           at org.openqa.selenium.remote.ErrorFilter.lambda$apply$0 (ErrorFilter.java:44)\nE           at org.openqa.selenium.remote.http.Filter$1.execute (Filter.java:63)\nE           at org.openqa.selenium.remote.ErrorFilter.lambda$apply$0 (ErrorFilter.java:44)\nE           at org.openqa.selenium.remote.http.Filter$1.execute (Filter.java:63)\nE           at org.openqa.selenium.netty.server.SeleniumHandler.lambda$channelRead0$0 (SeleniumHandler.java:44)\nE           at java.util.concurrent.Executors$RunnableAdapter.call (Executors.java:539)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:264)\nE           at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1136)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:635)\nE           at java.lang.Thread.run (Thread.java:840)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: SessionNotCreatedException\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function scrape_step at 0x7fa1a61aeca0>\nrequest = <FixtureRequest for <Function test_scenario_outline[ArunCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fa1b81c8a40>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ArunCouncil.CouncilClass object at 0x7fa1b80d62d0>, page = ''\nkwargs = {'council_module_str': 'ArunCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ndata = {'bins': []}, user_paon = '1', user_postcode = 'BN16 4DA'\nheadless = True, web_driver = 'http://localhost:4444'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        try:\n            # Make a BS4 object\n            data = {\"bins\": []}\n    \n            user_paon = kwargs.get(\"paon\")\n            user_postcode = kwargs.get(\"postcode\")\n            headless = kwargs.get(\"headless\")\n            web_driver = kwargs.get(\"web_driver\")\n            driver = create_webdriver(web_driver, headless, None, __name__)\n            page = \"https://www1.arun.gov.uk/when-are-my-bins-collected/\"\n            check_paon(user_paon)\n            check_postcode(user_postcode)\n            driver.get(page)\n    \n            start_now_button = WebDriverWait(driver, timeout=15).until(\n                EC.presence_of_element_located((By.LINK_TEXT, \"Start now\"))\n            )\n            start_now_button.click()\n    \n            # Wait for the postcode field to appear then populate it\n            input_element_postcode = WebDriverWait(driver, 30).until(\n                EC.presence_of_element_located((By.ID, \"postcode\"))\n            )\n            input_element_postcode.send_keys(user_postcode)\n    \n            continue_button = WebDriverWait(driver, timeout=15).until(\n                EC.presence_of_element_located((By.CLASS_NAME, \"govuk-button\"))\n            )\n            continue_button.click()\n    \n            address_selection_menu = Select(driver.find_element(By.ID, \"address\"))\n            for idx, addr_option in enumerate(address_selection_menu.options):\n                option_name = addr_option.text[0 : len(user_paon)]\n                if option_name == user_paon:\n                    selected_address = addr_option\n                    break\n            address_selection_menu.select_by_visible_text(selected_address.text)\n    \n            continue_button = WebDriverWait(driver, timeout=15).until(\n                EC.presence_of_element_located((By.CLASS_NAME, \"govuk-button\"))\n            )\n            continue_button.click()\n            # Check for text saying \"Next collection dates\"\n            WebDriverWait(driver, 30).until(\n                EC.presence_of_element_located(\n                    (By.XPATH, \"//*[contains(text(), 'Next collection dates')]\")\n                )\n            )\n    \n            soup = BeautifulSoup(driver.page_source, \"html.parser\")\n            soup.prettify()\n            table = soup.find(\"table\", class_=\"govuk-table\")\n    \n            for row in table.find(\"tbody\").find_all(\"tr\"):\n                # Extract the type of collection and the date of next collection\n                collection_type = (\n                    row.find(\"th\", class_=\"govuk-table__header\").text.strip().split(\" \")\n                )[0]\n                collection_date = row.find(\n                    \"td\", class_=\"govuk-table__cell\"\n                ).text.strip()\n    \n                # Append the information to the data structure\n                data[\"bins\"].append(\n                    {\"type\": collection_type, \"collectionDate\": collection_date}\n                )\n    \n        except Exception as e:\n            # Here you can log the exception if needed\n            print(f\"An error occurred: {e}\")\n            # Optionally, re-raise the exception if you want it to propagate\n            raise\n        finally:\n            # This block ensures that the driver is closed regardless of an exception.\n>           if driver:\nE           UnboundLocalError: cannot access local variable 'driver' where it is not associated with a value\n\nuk_bin_collection/uk_bin_collection/councils/ArunCouncil.py:96: UnboundLocalError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"UnboundLocalError: cannot access local variable 'driver' where it is not associated with a value","statusTrace":"self = <ArunCouncil.CouncilClass object at 0x7fa1b80d62d0>, page = ''\nkwargs = {'council_module_str': 'ArunCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ndata = {'bins': []}, user_paon = '1', user_postcode = 'BN16 4DA'\nheadless = True, web_driver = 'http://localhost:4444'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        try:\n            # Make a BS4 object\n            data = {\"bins\": []}\n    \n            user_paon = kwargs.get(\"paon\")\n            user_postcode = kwargs.get(\"postcode\")\n            headless = kwargs.get(\"headless\")\n            web_driver = kwargs.get(\"web_driver\")\n>           driver = create_webdriver(web_driver, headless, None, __name__)\n\nuk_bin_collection/uk_bin_collection/councils/ArunCouncil.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/uk_bin_collection/common.py:323: in create_webdriver\n    return webdriver.Remote(command_executor=web_driver, options=options)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:212: in __init__\n    self.start_session(capabilities)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:299: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa1a60340b0>\nresponse = {'status': 500, 'value': '{\\n  \"value\": {\\n    \"error\": \"session not created\",\\n    \"message\": \"Could not start a new ...\"className\": \"java.lang.Thread\",\\n        \"lineNumber\": 840,\\n        \"classLoaderName\": null\\n      }\\n    ]\\n  }\\n}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: Could not start a new session. New session request timed out \nE       Host info: host: 'selenium', ip: '172.18.0.2'\nE       Build info: version: '4.25.0', revision: '030fcf7918'\nE       System info: os.name: 'Linux', os.arch: 'amd64', os.version: '6.5.0-1025-azure', java.version: '17.0.12'\nE       Driver info: driver.version: unknown\nE       Stacktrace:\nE           at org.openqa.selenium.grid.sessionqueue.local.LocalNewSessionQueue.addToQueue (LocalNewSessionQueue.java:221)\nE           at org.openqa.selenium.grid.sessionqueue.NewSessionQueue.lambda$new$0 (NewSessionQueue.java:68)\nE           at org.openqa.selenium.remote.http.Route$TemplatizedRoute.handle (Route.java:192)\nE           at org.openqa.selenium.remote.http.Route.execute (Route.java:69)\nE           at org.openqa.selenium.remote.http.Route$CombinedRoute.handle (Route.java:360)\nE           at org.openqa.selenium.remote.http.Route.execute (Route.java:69)\nE           at org.openqa.selenium.grid.sessionqueue.NewSessionQueue.execute (NewSessionQueue.java:128)\nE           at org.openqa.selenium.remote.tracing.SpanWrappedHttpHandler.execute (SpanWrappedHttpHandler.java:87)\nE           at org.openqa.selenium.remote.http.Filter$1.execute (Filter.java:63)\nE           at org.openqa.selenium.remote.http.Route$CombinedRoute.handle (Route.java:360)\nE           at org.openqa.selenium.remote.http.Route.execute (Route.java:69)\nE           at org.openqa.selenium.grid.router.Router.execute (Router.java:87)\nE           at org.openqa.selenium.grid.web.EnsureSpecCompliantResponseHeaders.lambda$apply$0 (EnsureSpecCompliantResponseHeaders.java:34)\nE           at org.openqa.selenium.remote.http.Filter$1.execute (Filter.java:63)\nE           at org.openqa.selenium.remote.http.Route$CombinedRoute.handle (Route.java:360)\nE           at org.openqa.selenium.remote.http.Route.execute (Route.java:69)\nE           at org.openqa.selenium.remote.AddWebDriverSpecHeaders.lambda$apply$0 (AddWebDriverSpecHeaders.java:35)\nE           at org.openqa.selenium.remote.ErrorFilter.lambda$apply$0 (ErrorFilter.java:44)\nE           at org.openqa.selenium.remote.http.Filter$1.execute (Filter.java:63)\nE           at org.openqa.selenium.remote.ErrorFilter.lambda$apply$0 (ErrorFilter.java:44)\nE           at org.openqa.selenium.remote.http.Filter$1.execute (Filter.java:63)\nE           at org.openqa.selenium.netty.server.SeleniumHandler.lambda$channelRead0$0 (SeleniumHandler.java:44)\nE           at java.util.concurrent.Executors$RunnableAdapter.call (Executors.java:539)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:264)\nE           at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1136)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:635)\nE           at java.lang.Thread.run (Thread.java:840)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: SessionNotCreatedException\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function scrape_step at 0x7fa1a61aeca0>\nrequest = <FixtureRequest for <Function test_scenario_outline[ArunCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fa1b81c8a40>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ArunCouncil.CouncilClass object at 0x7fa1b80d62d0>, page = ''\nkwargs = {'council_module_str': 'ArunCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ndata = {'bins': []}, user_paon = '1', user_postcode = 'BN16 4DA'\nheadless = True, web_driver = 'http://localhost:4444'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        try:\n            # Make a BS4 object\n            data = {\"bins\": []}\n    \n            user_paon = kwargs.get(\"paon\")\n            user_postcode = kwargs.get(\"postcode\")\n            headless = kwargs.get(\"headless\")\n            web_driver = kwargs.get(\"web_driver\")\n            driver = create_webdriver(web_driver, headless, None, __name__)\n            page = \"https://www1.arun.gov.uk/when-are-my-bins-collected/\"\n            check_paon(user_paon)\n            check_postcode(user_postcode)\n            driver.get(page)\n    \n            start_now_button = WebDriverWait(driver, timeout=15).until(\n                EC.presence_of_element_located((By.LINK_TEXT, \"Start now\"))\n            )\n            start_now_button.click()\n    \n            # Wait for the postcode field to appear then populate it\n            input_element_postcode = WebDriverWait(driver, 30).until(\n                EC.presence_of_element_located((By.ID, \"postcode\"))\n            )\n            input_element_postcode.send_keys(user_postcode)\n    \n            continue_button = WebDriverWait(driver, timeout=15).until(\n                EC.presence_of_element_located((By.CLASS_NAME, \"govuk-button\"))\n            )\n            continue_button.click()\n    \n            address_selection_menu = Select(driver.find_element(By.ID, \"address\"))\n            for idx, addr_option in enumerate(address_selection_menu.options):\n                option_name = addr_option.text[0 : len(user_paon)]\n                if option_name == user_paon:\n                    selected_address = addr_option\n                    break\n            address_selection_menu.select_by_visible_text(selected_address.text)\n    \n            continue_button = WebDriverWait(driver, timeout=15).until(\n                EC.presence_of_element_located((By.CLASS_NAME, \"govuk-button\"))\n            )\n            continue_button.click()\n            # Check for text saying \"Next collection dates\"\n            WebDriverWait(driver, 30).until(\n                EC.presence_of_element_located(\n                    (By.XPATH, \"//*[contains(text(), 'Next collection dates')]\")\n                )\n            )\n    \n            soup = BeautifulSoup(driver.page_source, \"html.parser\")\n            soup.prettify()\n            table = soup.find(\"table\", class_=\"govuk-table\")\n    \n            for row in table.find(\"tbody\").find_all(\"tr\"):\n                # Extract the type of collection and the date of next collection\n                collection_type = (\n                    row.find(\"th\", class_=\"govuk-table__header\").text.strip().split(\" \")\n                )[0]\n                collection_date = row.find(\n                    \"td\", class_=\"govuk-table__cell\"\n                ).text.strip()\n    \n                # Append the information to the data structure\n                data[\"bins\"].append(\n                    {\"type\": collection_type, \"collectionDate\": collection_date}\n                )\n    \n        except Exception as e:\n            # Here you can log the exception if needed\n            print(f\"An error occurred: {e}\")\n            # Optionally, re-raise the exception if you want it to propagate\n            raise\n        finally:\n            # This block ensures that the driver is closed regardless of an exception.\n>           if driver:\nE           UnboundLocalError: cannot access local variable 'driver' where it is not associated with a value\n\nuk_bin_collection/uk_bin_collection/councils/ArunCouncil.py:96: UnboundLocalError","steps":[{"name":"Given the council","time":{"start":1728691271146,"stop":1728691271147,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1728691271147,"stop":1728691571175,"duration":300028},"status":"failed","statusMessage":"cannot access local variable 'driver' where it is not associated with a value","statusTrace":"UnboundLocalError: cannot access local variable 'driver' where it is not associated with a value\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"1838044edc6e2dfc","name":"stdout","source":"1838044edc6e2dfc.txt","type":"text/plain","size":2648}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az661-552"},{"name":"thread","value":"2848-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"ArunCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":0,"skipped":0,"passed":162,"unknown":0,"total":169},"items":[{"uid":"dadacd6853cff451","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2210//#testresult/dadacd6853cff451","status":"failed","statusDetails":"UnboundLocalError: cannot access local variable 'driver' where it is not associated with a value","time":{"start":1728604892603,"stop":1728605192626,"duration":300023}},{"uid":"32ff51c5a72caa00","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2199//#testresult/32ff51c5a72caa00","status":"failed","statusDetails":"UnboundLocalError: cannot access local variable 'driver' where it is not associated with a value","time":{"start":1728518481259,"stop":1728518781288,"duration":300029}},{"uid":"8d1670494ef25f4b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2188//#testresult/8d1670494ef25f4b","status":"failed","statusDetails":"UnboundLocalError: cannot access local variable 'driver' where it is not associated with a value","time":{"start":1728432089050,"stop":1728432389072,"duration":300022}},{"uid":"d4e4ebf5095651e5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2169//#testresult/d4e4ebf5095651e5","status":"passed","time":{"start":1728331940661,"stop":1728331981358,"duration":40697}},{"uid":"915f01006f8fd231","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2165//#testresult/915f01006f8fd231","status":"passed","time":{"start":1728259283006,"stop":1728259324422,"duration":41416}},{"uid":"b499563ecce134f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2164//#testresult/b499563ecce134f","status":"passed","time":{"start":1728172876815,"stop":1728172918972,"duration":42157}},{"uid":"1a14915818fb7891","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2160//#testresult/1a14915818fb7891","status":"passed","time":{"start":1728086473008,"stop":1728086509575,"duration":36567}},{"uid":"c59eb4f929e1f246","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2152//#testresult/c59eb4f929e1f246","status":"passed","time":{"start":1728000070551,"stop":1728000106977,"duration":36426}},{"uid":"a9c7191df8f40f8c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2148//#testresult/a9c7191df8f40f8c","status":"passed","time":{"start":1727931969093,"stop":1727931995003,"duration":25910}},{"uid":"c6661b2bc42ea89a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2146//#testresult/c6661b2bc42ea89a","status":"passed","time":{"start":1727913669749,"stop":1727913716936,"duration":47187}},{"uid":"28d8842676004e3f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2139//#testresult/28d8842676004e3f","status":"passed","time":{"start":1727827271699,"stop":1727827312787,"duration":41088}},{"uid":"7afd344d91a90d20","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2138//#testresult/7afd344d91a90d20","status":"passed","time":{"start":1727740873602,"stop":1727740909531,"duration":35929}},{"uid":"723188ea0e4b98d9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2137//#testresult/723188ea0e4b98d9","status":"passed","time":{"start":1727654476080,"stop":1727654508406,"duration":32326}},{"uid":"4618990ef2d0947","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2136//#testresult/4618990ef2d0947","status":"passed","time":{"start":1727568070466,"stop":1727568107321,"duration":36855}},{"uid":"932ff3facd63f84","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2135//#testresult/932ff3facd63f84","status":"passed","time":{"start":1727481676971,"stop":1727481711437,"duration":34466}},{"uid":"b00978fc2e11318e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2131//#testresult/b00978fc2e11318e","status":"passed","time":{"start":1727421650986,"stop":1727421665949,"duration":14963}},{"uid":"6fd040dd577c2ba4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2130//#testresult/6fd040dd577c2ba4","status":"passed","time":{"start":1727395292792,"stop":1727395337565,"duration":44773}},{"uid":"ecce7a96efe8258f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2129//#testresult/ecce7a96efe8258f","status":"passed","time":{"start":1727308875641,"stop":1727308913143,"duration":37502}},{"uid":"54cddb0b980f31d1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2128//#testresult/54cddb0b980f31d1","status":"passed","time":{"start":1727222474299,"stop":1727222532710,"duration":58411}},{"uid":"944398f86bb9e0d1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2127//#testresult/944398f86bb9e0d1","status":"passed","time":{"start":1727136086585,"stop":1727136134760,"duration":48175}}]},"tags":[]},"source":"dbf4efc15daa068e.json","parameterValues":["ArunCouncil"]}