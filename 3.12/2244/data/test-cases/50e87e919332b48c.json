{"uid":"50e87e919332b48c","name":"Validate Council Output [WalthamForest]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"f804494c5f4de0ecd7ce05105f7ab6a0","time":{"start":1729125375821,"stop":1729125447472,"duration":71651},"status":"failed","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=129.0.6668.100)\nStacktrace:\n#0 0x55da936e1b9a <unknown>\n#1 0x55da933c74cd <unknown>\n#2 0x55da93410ba8 <unknown>\n#3 0x55da9340f021 <unknown>\n#4 0x55da9343bb82 <unknown>\n#5 0x55da9340b4c8 <unknown>\n#6 0x55da9343bd4e <unknown>\n#7 0x55da9345add6 <unknown>\n#8 0x55da9343b923 <unknown>\n#9 0x55da934096e7 <unknown>\n#10 0x55da9340a6de <unknown>\n#11 0x55da936ab66b <unknown>\n#12 0x55da936af611 <unknown>\n#13 0x55da936974e5 <unknown>\n#14 0x55da936b0192 <unknown>\n#15 0x55da9367c6ef <unknown>\n#16 0x55da936d09d8 <unknown>\n#17 0x55da936d0ba7 <unknown>\n#18 0x55da936e09ec <unknown>\n#19 0x7fded2b5fa94 <unknown>\n#20 0x7fded2beca34 __clone","statusTrace":"fixturefunc = <function scrape_step at 0x7f1fe8f249a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WalthamForest]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f1fea0536e0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WalthamForest.py:66: in parse_data\n    dropdown_search.send_keys(user_paon)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:231: in send_keys\n    self._execute(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1fe7e3ede0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...unknown>\\\\n#18 0x55da936e09ec \\\\u003Cunknown>\\\\n#19 0x7fded2b5fa94 \\\\u003Cunknown>\\\\n#20 0x7fded2beca34 __clone\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=129.0.6668.100)\nE       Stacktrace:\nE       #0 0x55da936e1b9a <unknown>\nE       #1 0x55da933c74cd <unknown>\nE       #2 0x55da93410ba8 <unknown>\nE       #3 0x55da9340f021 <unknown>\nE       #4 0x55da9343bb82 <unknown>\nE       #5 0x55da9340b4c8 <unknown>\nE       #6 0x55da9343bd4e <unknown>\nE       #7 0x55da9345add6 <unknown>\nE       #8 0x55da9343b923 <unknown>\nE       #9 0x55da934096e7 <unknown>\nE       #10 0x55da9340a6de <unknown>\nE       #11 0x55da936ab66b <unknown>\nE       #12 0x55da936af611 <unknown>\nE       #13 0x55da936974e5 <unknown>\nE       #14 0x55da936b0192 <unknown>\nE       #15 0x55da9367c6ef <unknown>\nE       #16 0x55da936d09d8 <unknown>\nE       #17 0x55da936d0ba7 <unknown>\nE       #18 0x55da936e09ec <unknown>\nE       #19 0x7fded2b5fa94 <unknown>\nE       #20 0x7fded2beca34 __clone\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=129.0.6668.100)\nStacktrace:\n#0 0x55da936e1b9a <unknown>\n#1 0x55da933c74cd <unknown>\n#2 0x55da93410ba8 <unknown>\n#3 0x55da9340f021 <unknown>\n#4 0x55da9343bb82 <unknown>\n#5 0x55da9340b4c8 <unknown>\n#6 0x55da9343bd4e <unknown>\n#7 0x55da9345add6 <unknown>\n#8 0x55da9343b923 <unknown>\n#9 0x55da934096e7 <unknown>\n#10 0x55da9340a6de <unknown>\n#11 0x55da936ab66b <unknown>\n#12 0x55da936af611 <unknown>\n#13 0x55da936974e5 <unknown>\n#14 0x55da936b0192 <unknown>\n#15 0x55da9367c6ef <unknown>\n#16 0x55da936d09d8 <unknown>\n#17 0x55da936d0ba7 <unknown>\n#18 0x55da936e09ec <unknown>\n#19 0x7fded2b5fa94 <unknown>\n#20 0x7fded2beca34 __clone","statusTrace":"fixturefunc = <function scrape_step at 0x7f1fe8f249a0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WalthamForest]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f1fea0536e0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WalthamForest.py:66: in parse_data\n    dropdown_search.send_keys(user_paon)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:231: in send_keys\n    self._execute(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1fe7e3ede0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...unknown>\\\\n#18 0x55da936e09ec \\\\u003Cunknown>\\\\n#19 0x7fded2b5fa94 \\\\u003Cunknown>\\\\n#20 0x7fded2beca34 __clone\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=129.0.6668.100)\nE       Stacktrace:\nE       #0 0x55da936e1b9a <unknown>\nE       #1 0x55da933c74cd <unknown>\nE       #2 0x55da93410ba8 <unknown>\nE       #3 0x55da9340f021 <unknown>\nE       #4 0x55da9343bb82 <unknown>\nE       #5 0x55da9340b4c8 <unknown>\nE       #6 0x55da9343bd4e <unknown>\nE       #7 0x55da9345add6 <unknown>\nE       #8 0x55da9343b923 <unknown>\nE       #9 0x55da934096e7 <unknown>\nE       #10 0x55da9340a6de <unknown>\nE       #11 0x55da936ab66b <unknown>\nE       #12 0x55da936af611 <unknown>\nE       #13 0x55da936974e5 <unknown>\nE       #14 0x55da936b0192 <unknown>\nE       #15 0x55da9367c6ef <unknown>\nE       #16 0x55da936d09d8 <unknown>\nE       #17 0x55da936d0ba7 <unknown>\nE       #18 0x55da936e09ec <unknown>\nE       #19 0x7fded2b5fa94 <unknown>\nE       #20 0x7fded2beca34 __clone\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException","steps":[{"name":"Given the council","time":{"start":1729125375821,"stop":1729125375822,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1729125375822,"stop":1729125447472,"duration":71650},"status":"failed","statusMessage":"Message: element not interactable\n  (Session info: chrome=129.0.6668.100)\nStacktrace:\n#0 0x55da936e1b9a <unknown>\n#1 0x55da933c74cd <unknown>\n#2 0x55da93410ba8 <unknown>\n#3 0x55da9340f021 <unknown>\n#4 0x55da9343bb82 <unknown>\n#5 0x55da9340b4c8 <unknown>\n#6 0x55da9343bd4e <unknown>\n#7 0x55da9345add6 <unknown>\n#8 0x55da9343b923 <unknown>\n#9 0x55da934096e7 <unknown>\n#10 0x55da9340a6de <unknown>\n#11 0x55da936ab66b <unknown>\n#12 0x55da936af611 <unknown>\n#13 0x55da936974e5 <unknown>\n#14 0x55da936b0192 <unknown>\n#15 0x55da9367c6ef <unknown>\n#16 0x55da936d09d8 <unknown>\n#17 0x55da936d0ba7 <unknown>\n#18 0x55da936e09ec <unknown>\n#19 0x7fded2b5fa94 <unknown>\n#20 0x7fded2beca34 __clone\n","statusTrace":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=129.0.6668.100)\nStacktrace:\n#0 0x55da936e1b9a <unknown>\n#1 0x55da933c74cd <unknown>\n#2 0x55da93410ba8 <unknown>\n#3 0x55da9340f021 <unknown>\n#4 0x55da9343bb82 <unknown>\n#5 0x55da9340b4c8 <unknown>\n#6 0x55da9343bd4e <unknown>\n#7 0x55da9345add6 <unknown>\n#8 0x55da9343b923 <unknown>\n#9 0x55da934096e7 <unknown>\n#10 0x55da9340a6de <unknown>\n#11 0x55da936ab66b <unknown>\n#12 0x55da936af611 <unknown>\n#13 0x55da936974e5 <unknown>\n#14 0x55da936b0192 <unknown>\n#15 0x55da9367c6ef <unknown>\n#16 0x55da936d09d8 <unknown>\n#17 0x55da936d0ba7 <unknown>\n#18 0x55da936e09ec <unknown>\n#19 0x7fded2b5fa94 <unknown>\n#20 0x7fded2beca34 __clone\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"219529be4faf1e5d","name":"stdout","source":"219529be4faf1e5d.txt","type":"text/plain","size":743}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1272-281"},{"name":"thread","value":"2742-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WalthamForest"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":12,"broken":0,"skipped":0,"passed":145,"unknown":0,"total":157},"items":[{"uid":"b640bf15784906e8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2242//#testresult/b640bf15784906e8","status":"passed","time":{"start":1729113250223,"stop":1729113456159,"duration":205936}},{"uid":"c12ec9a899ad46cc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2237//#testresult/c12ec9a899ad46cc","status":"failed","statusDetails":"selenium.common.exceptions.SessionNotCreatedException: Message: Could not start a new session. New session request timed out \nHost info: host: 'selenium', ip: '172.18.0.2'\nBuild info: version: '4.25.0', revision: '030fcf7918'\nSystem info: os.name: 'Linux', os.arch: 'amd64', os.version: '6.8.0-1015-azure', java.version: '17.0.12'\nDriver info: driver.version: unknown\nStacktrace:\n    at org.openqa.selenium.grid.sessionqueue.local.LocalNewSessionQueue.addToQueue (LocalNewSessionQueue.java:221)\n    at org.openqa.selenium.grid.sessionqueue.NewSessionQueue.lambda$new$0 (NewSessionQueue.java:68)\n    at org.openqa.selenium.remote.http.Route$TemplatizedRoute.handle (Route.java:192)\n    at org.openqa.selenium.remote.http.Route.execute (Route.java:69)\n    at org.openqa.selenium.remote.http.Route$CombinedRoute.handle (Route.java:360)\n    at org.openqa.selenium.remote.http.Route.execute (Route.java:69)\n    at org.openqa.selenium.grid.sessionqueue.NewSessionQueue.execute (NewSessionQueue.java:128)\n    at org.openqa.selenium.remote.tracing.SpanWrappedHttpHandler.execute (SpanWrappedHttpHandler.java:87)\n    at org.openqa.selenium.remote.http.Filter$1.execute (Filter.java:63)\n    at org.openqa.selenium.remote.http.Route$CombinedRoute.handle (Route.java:360)\n    at org.openqa.selenium.remote.http.Route.execute (Route.java:69)\n    at org.openqa.selenium.grid.router.Router.execute (Router.java:87)\n    at org.openqa.selenium.grid.web.EnsureSpecCompliantResponseHeaders.lambda$apply$0 (EnsureSpecCompliantResponseHeaders.java:34)\n    at org.openqa.selenium.remote.http.Filter$1.execute (Filter.java:63)\n    at org.openqa.selenium.remote.http.Route$CombinedRoute.handle (Route.java:360)\n    at org.openqa.selenium.remote.http.Route.execute (Route.java:69)\n    at org.openqa.selenium.remote.AddWebDriverSpecHeaders.lambda$apply$0 (AddWebDriverSpecHeaders.java:35)\n    at org.openqa.selenium.remote.ErrorFilter.lambda$apply$0 (ErrorFilter.java:44)\n    at org.openqa.selenium.remote.http.Filter$1.execute (Filter.java:63)\n    at org.openqa.selenium.remote.ErrorFilter.lambda$apply$0 (ErrorFilter.java:44)\n    at org.openqa.selenium.remote.http.Filter$1.execute (Filter.java:63)\n    at org.openqa.selenium.netty.server.SeleniumHandler.lambda$channelRead0$0 (SeleniumHandler.java:44)\n    at java.util.concurrent.Executors$RunnableAdapter.call (Executors.java:539)\n    at java.util.concurrent.FutureTask.run (FutureTask.java:264)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1136)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:635)\n    at java.lang.Thread.run (Thread.java:840)","time":{"start":1729038676445,"stop":1729038976453,"duration":300008}},{"uid":"e6fc89585956bc67","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2233//#testresult/e6fc89585956bc67","status":"passed","time":{"start":1728952695482,"stop":1728952737504,"duration":42022}},{"uid":"796f6005fedc15a0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2227//#testresult/796f6005fedc15a0","status":"passed","time":{"start":1728865830303,"stop":1728865918811,"duration":88508}},{"uid":"cdcc1e2e4552f147","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2214//#testresult/cdcc1e2e4552f147","status":"passed","time":{"start":1728779540330,"stop":1728779579459,"duration":39129}},{"uid":"a7273876feeec433","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2211//#testresult/a7273876feeec433","status":"passed","time":{"start":1728693524051,"stop":1728693543358,"duration":19307}},{"uid":"a030b1655382487d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2210//#testresult/a030b1655382487d","status":"passed","time":{"start":1728606772431,"stop":1728606805723,"duration":33292}},{"uid":"f8a9c7bb15aa8446","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2199//#testresult/f8a9c7bb15aa8446","status":"passed","time":{"start":1728520407907,"stop":1728520443387,"duration":35480}},{"uid":"ea37f4a6aff3cab1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2188//#testresult/ea37f4a6aff3cab1","status":"passed","time":{"start":1728433993440,"stop":1728434042266,"duration":48826}},{"uid":"fb6bc54d10851592","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2169//#testresult/fb6bc54d10851592","status":"passed","time":{"start":1728333992273,"stop":1728334057882,"duration":65609}},{"uid":"1c560dfc4adfbb58","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2165//#testresult/1c560dfc4adfbb58","status":"passed","time":{"start":1728261481415,"stop":1728261544368,"duration":62953}},{"uid":"52a1db691574fd28","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2164//#testresult/52a1db691574fd28","status":"passed","time":{"start":1728174609492,"stop":1728174640286,"duration":30794}},{"uid":"a35888055d6aea70","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2160//#testresult/a35888055d6aea70","status":"passed","time":{"start":1728088053023,"stop":1728088069976,"duration":16953}},{"uid":"74b17b944a119ed1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2152//#testresult/74b17b944a119ed1","status":"passed","time":{"start":1728001976790,"stop":1728002012941,"duration":36151}},{"uid":"f3a08478d9384c39","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2148//#testresult/f3a08478d9384c39","status":"passed","time":{"start":1727933909103,"stop":1727933964958,"duration":55855}},{"uid":"2e3aa671706a96e0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2146//#testresult/2e3aa671706a96e0","status":"passed","time":{"start":1727915438723,"stop":1727915486190,"duration":47467}},{"uid":"c058c60916e15447","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2139//#testresult/c058c60916e15447","status":"passed","time":{"start":1727829013923,"stop":1727829038408,"duration":24485}},{"uid":"8178c6a0c2dcf405","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2138//#testresult/8178c6a0c2dcf405","status":"passed","time":{"start":1727742689121,"stop":1727742761160,"duration":72039}},{"uid":"5a9aea26111e75e7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2137//#testresult/5a9aea26111e75e7","status":"passed","time":{"start":1727656019423,"stop":1727656047643,"duration":28220}},{"uid":"844420591704e32c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2136//#testresult/844420591704e32c","status":"passed","time":{"start":1727569615682,"stop":1727569654880,"duration":39198}}]},"tags":[]},"source":"50e87e919332b48c.json","parameterValues":["WalthamForest"]}