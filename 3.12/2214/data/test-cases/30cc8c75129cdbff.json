{"uid":"30cc8c75129cdbff","name":"Validate Council Output [MoleValleyDistrictCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"47d4fc200fdb123acdd0e48934223e47","time":{"start":1728778710197,"stop":1728778710933,"duration":736},"status":"failed","statusMessage":"ValueError: min() iterable argument is empty","statusTrace":"fixturefunc = <function scrape_step at 0x7f44abb0fce0>\nrequest = <FixtureRequest for <Function test_scenario_outline[MoleValleyDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f44ac972480>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <MoleValleyDistrictCouncil.CouncilClass object at 0x7f44aae9f9b0>\npage = ''\nkwargs = {'council_module_str': 'MoleValleyDistrictCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nuser_postcode = 'RH4 1SJ'\nroot_url = 'https://myproperty.molevalley.gov.uk/molevalley/api/live_addresses/RH4 1SJ?format=json'\nresponse = <Response [200]>\njsonData = {'count': 1, 'next': None, 'previous': None, 'results': {'features': [{'geometry': {'coordinates': [517012.0, 149823.0...orking, RH41SJ', 'blpu_parent_uprn': None, 'blpu_status': 'L', ...}, 'type': 'Feature'}], 'type': 'FeatureCollection'}}\nproperties_found = [{'geometry': {'coordinates': [517012.0, 149823.0], 'type': 'Point'}, 'id': 34547636, 'properties': {'address_string':...ouncil Offices, Reigate Road, Dorking, RH41SJ', 'blpu_parent_uprn': None, 'blpu_status': 'L', ...}, 'type': 'Feature'}]\nhtml_data = '\\n\\t<!-- Column 1 -->\\n\\t<div class=\"col-md-4\">\\n\\t\\t<div class=\"panel\">\\n\\t\\t\\t<!-- For consistency you way want to ...etsbox1.png\" width=\"150\"\\nheight=\"98\" style=\"border: 0;\" alt=\"CycleStreets\" /></a></p>\\n\\n\\n\\t\\t</div>\\n\\t</div>\\n\\t\\t'\nuprn = '200000171235'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n    \n        user_postcode = kwargs.get(\"postcode\")\n        check_postcode(user_postcode)\n    \n        root_url = \"https://myproperty.molevalley.gov.uk/molevalley/api/live_addresses/{}?format=json\".format(\n            user_postcode\n        )\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(root_url, verify=False)\n    \n        if not response.ok:\n            raise ValueError(\"Invalid server response code retreiving data.\")\n    \n        jsonData = response.json()\n    \n        if len(jsonData[\"results\"][\"features\"]) == 0:\n            raise ValueError(\"No collection data found for postcode provided.\")\n    \n        properties_found = jsonData[\"results\"][\"features\"]\n    \n        # If UPRN is provided, we can check a specific address.\n        html_data = None\n        uprn = kwargs.get(\"uprn\")\n        if uprn:\n            check_uprn(uprn)\n            for item in properties_found:\n                if uprn == str(int(item[\"properties\"][\"blpu_uprn\"])):\n                    html_data = item[\"properties\"][\"three_column_layout_html\"]\n                    break\n            if html_data is None:\n                raise ValueError(\"No collection data found for UPRN provided.\")\n        else:\n            # If UPRN not provided, just use the first result\n            html_data = properties_found[0][\"properties\"][\"three_column_layout_html\"]\n    \n        soup = BeautifulSoup(html_data, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n        all_collection_dates = []\n        regex_date = re.compile(r\".* ([\\d]+\\/[\\d]+\\/[\\d]+)\")\n        regex_additional_collection = re.compile(r\"We also collect (.*) on (.*) -\")\n    \n        # Search for the 'Bins and Recycling' panel\n        for panel in soup.select('div[class*=\"panel\"]'):\n            if panel.h2.text.strip() == \"Bins and Recycling\":\n    \n                # Gather the bin types and dates\n                for collection in panel.select(\"div > strong\"):\n                    bin_type = collection.text.strip()\n                    collection_string = collection.find_next(\"p\").text.strip()\n                    m = regex_date.match(collection_string)\n                    if m:\n                        collection_date = datetime.strptime(\n                            m.group(1), \"%d/%m/%Y\"\n                        ).date()\n                        data[\"bins\"].append(\n                            {\n                                \"type\": bin_type,\n                                \"collectionDate\": collection_date.strftime(\"%d/%m/%Y\"),\n                            }\n                        )\n                        all_collection_dates.append(collection_date)\n    \n                # Search for additional collections\n                for p in panel.select(\"p\"):\n                    m2 = regex_additional_collection.match(p.text.strip())\n                    if m2:\n                        bin_type = m2.group(1)\n                        if \"each collection day\" in m2.group(2):\n>                           collection_date = min(all_collection_dates)\nE                           ValueError: min() iterable argument is empty\n\nuk_bin_collection/uk_bin_collection/councils/MoleValleyDistrictCouncil.py:90: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: min() iterable argument is empty","statusTrace":"fixturefunc = <function scrape_step at 0x7f44abb0fce0>\nrequest = <FixtureRequest for <Function test_scenario_outline[MoleValleyDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f44ac972480>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <MoleValleyDistrictCouncil.CouncilClass object at 0x7f44aae9f9b0>\npage = ''\nkwargs = {'council_module_str': 'MoleValleyDistrictCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nuser_postcode = 'RH4 1SJ'\nroot_url = 'https://myproperty.molevalley.gov.uk/molevalley/api/live_addresses/RH4 1SJ?format=json'\nresponse = <Response [200]>\njsonData = {'count': 1, 'next': None, 'previous': None, 'results': {'features': [{'geometry': {'coordinates': [517012.0, 149823.0...orking, RH41SJ', 'blpu_parent_uprn': None, 'blpu_status': 'L', ...}, 'type': 'Feature'}], 'type': 'FeatureCollection'}}\nproperties_found = [{'geometry': {'coordinates': [517012.0, 149823.0], 'type': 'Point'}, 'id': 34547636, 'properties': {'address_string':...ouncil Offices, Reigate Road, Dorking, RH41SJ', 'blpu_parent_uprn': None, 'blpu_status': 'L', ...}, 'type': 'Feature'}]\nhtml_data = '\\n\\t<!-- Column 1 -->\\n\\t<div class=\"col-md-4\">\\n\\t\\t<div class=\"panel\">\\n\\t\\t\\t<!-- For consistency you way want to ...etsbox1.png\" width=\"150\"\\nheight=\"98\" style=\"border: 0;\" alt=\"CycleStreets\" /></a></p>\\n\\n\\n\\t\\t</div>\\n\\t</div>\\n\\t\\t'\nuprn = '200000171235'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n    \n        user_postcode = kwargs.get(\"postcode\")\n        check_postcode(user_postcode)\n    \n        root_url = \"https://myproperty.molevalley.gov.uk/molevalley/api/live_addresses/{}?format=json\".format(\n            user_postcode\n        )\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(root_url, verify=False)\n    \n        if not response.ok:\n            raise ValueError(\"Invalid server response code retreiving data.\")\n    \n        jsonData = response.json()\n    \n        if len(jsonData[\"results\"][\"features\"]) == 0:\n            raise ValueError(\"No collection data found for postcode provided.\")\n    \n        properties_found = jsonData[\"results\"][\"features\"]\n    \n        # If UPRN is provided, we can check a specific address.\n        html_data = None\n        uprn = kwargs.get(\"uprn\")\n        if uprn:\n            check_uprn(uprn)\n            for item in properties_found:\n                if uprn == str(int(item[\"properties\"][\"blpu_uprn\"])):\n                    html_data = item[\"properties\"][\"three_column_layout_html\"]\n                    break\n            if html_data is None:\n                raise ValueError(\"No collection data found for UPRN provided.\")\n        else:\n            # If UPRN not provided, just use the first result\n            html_data = properties_found[0][\"properties\"][\"three_column_layout_html\"]\n    \n        soup = BeautifulSoup(html_data, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n        all_collection_dates = []\n        regex_date = re.compile(r\".* ([\\d]+\\/[\\d]+\\/[\\d]+)\")\n        regex_additional_collection = re.compile(r\"We also collect (.*) on (.*) -\")\n    \n        # Search for the 'Bins and Recycling' panel\n        for panel in soup.select('div[class*=\"panel\"]'):\n            if panel.h2.text.strip() == \"Bins and Recycling\":\n    \n                # Gather the bin types and dates\n                for collection in panel.select(\"div > strong\"):\n                    bin_type = collection.text.strip()\n                    collection_string = collection.find_next(\"p\").text.strip()\n                    m = regex_date.match(collection_string)\n                    if m:\n                        collection_date = datetime.strptime(\n                            m.group(1), \"%d/%m/%Y\"\n                        ).date()\n                        data[\"bins\"].append(\n                            {\n                                \"type\": bin_type,\n                                \"collectionDate\": collection_date.strftime(\"%d/%m/%Y\"),\n                            }\n                        )\n                        all_collection_dates.append(collection_date)\n    \n                # Search for additional collections\n                for p in panel.select(\"p\"):\n                    m2 = regex_additional_collection.match(p.text.strip())\n                    if m2:\n                        bin_type = m2.group(1)\n                        if \"each collection day\" in m2.group(2):\n>                           collection_date = min(all_collection_dates)\nE                           ValueError: min() iterable argument is empty\n\nuk_bin_collection/uk_bin_collection/councils/MoleValleyDistrictCouncil.py:90: ValueError","steps":[{"name":"Given the council","time":{"start":1728778710197,"stop":1728778710197,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1728778710197,"stop":1728778710933,"duration":736},"status":"failed","statusMessage":"min() iterable argument is empty","statusTrace":"ValueError: min() iterable argument is empty\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"9243679ab13c3585","name":"stdout","source":"9243679ab13c3585.txt","type":"text/plain","size":52}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az888-455"},{"name":"thread","value":"2789-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"MoleValleyDistrictCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":36,"broken":0,"skipped":0,"passed":134,"unknown":0,"total":170},"items":[{"uid":"2579aa2be4c77db2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2211//#testresult/2579aa2be4c77db2","status":"failed","statusDetails":"ValueError: min() iterable argument is empty","time":{"start":1728692608542,"stop":1728692609269,"duration":727}},{"uid":"e7272f63bd4277e8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2210//#testresult/e7272f63bd4277e8","status":"failed","statusDetails":"ValueError: min() iterable argument is empty","time":{"start":1728605969183,"stop":1728605970062,"duration":879}},{"uid":"55bf5fd8899bedad","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2199//#testresult/55bf5fd8899bedad","status":"failed","statusDetails":"ValueError: min() iterable argument is empty","time":{"start":1728519584272,"stop":1728519585476,"duration":1204}},{"uid":"7399ab41bd39f86e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2188//#testresult/7399ab41bd39f86e","status":"failed","statusDetails":"ValueError: min() iterable argument is empty","time":{"start":1728433133097,"stop":1728433134049,"duration":952}},{"uid":"b05be3da46d399e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2169//#testresult/b05be3da46d399e","status":"failed","statusDetails":"ValueError: min() iterable argument is empty","time":{"start":1728332929040,"stop":1728332929836,"duration":796}},{"uid":"4e73db356e733b31","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2165//#testresult/4e73db356e733b31","status":"failed","statusDetails":"ValueError: min() iterable argument is empty","time":{"start":1728260430308,"stop":1728260431427,"duration":1119}},{"uid":"f3c7b44feaa27903","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2164//#testresult/f3c7b44feaa27903","status":"failed","statusDetails":"ValueError: min() iterable argument is empty","time":{"start":1728174122405,"stop":1728174123340,"duration":935}},{"uid":"8e1bfd4db9b28b8d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2160//#testresult/8e1bfd4db9b28b8d","status":"failed","statusDetails":"ValueError: min() iterable argument is empty","time":{"start":1728087342054,"stop":1728087342680,"duration":626}},{"uid":"db5fac90e8fa6f61","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2152//#testresult/db5fac90e8fa6f61","status":"failed","statusDetails":"ValueError: min() iterable argument is empty","time":{"start":1728001247612,"stop":1728001248514,"duration":902}},{"uid":"2e123842fe9e8361","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2148//#testresult/2e123842fe9e8361","status":"failed","statusDetails":"ValueError: min() iterable argument is empty","time":{"start":1727932895075,"stop":1727932895924,"duration":849}},{"uid":"230a097f2fb86fa0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2146//#testresult/230a097f2fb86fa0","status":"failed","statusDetails":"ValueError: min() iterable argument is empty","time":{"start":1727914668461,"stop":1727914669057,"duration":596}},{"uid":"fea7216575d7d990","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2139//#testresult/fea7216575d7d990","status":"failed","statusDetails":"ValueError: min() iterable argument is empty","time":{"start":1727828224857,"stop":1727828225643,"duration":786}},{"uid":"6962b8a6f48a7771","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2138//#testresult/6962b8a6f48a7771","status":"failed","statusDetails":"ValueError: min() iterable argument is empty","time":{"start":1727741859328,"stop":1727741860168,"duration":840}},{"uid":"1fb0211da60aa2fa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2137//#testresult/1fb0211da60aa2fa","status":"failed","statusDetails":"ValueError: min() iterable argument is empty","time":{"start":1727655482017,"stop":1727655483202,"duration":1185}},{"uid":"93f88a72280cd672","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2136//#testresult/93f88a72280cd672","status":"failed","statusDetails":"ValueError: min() iterable argument is empty","time":{"start":1727569184022,"stop":1727569184751,"duration":729}},{"uid":"bcc4e306872440b9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2135//#testresult/bcc4e306872440b9","status":"failed","statusDetails":"ValueError: min() iterable argument is empty","time":{"start":1727482658486,"stop":1727482659290,"duration":804}},{"uid":"26d5dfe1ee7cbf92","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2131//#testresult/26d5dfe1ee7cbf92","status":"failed","statusDetails":"ValueError: min() iterable argument is empty","time":{"start":1727422599943,"stop":1727422601315,"duration":1372}},{"uid":"3c37080b84930eaa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2130//#testresult/3c37080b84930eaa","status":"failed","statusDetails":"ValueError: min() iterable argument is empty","time":{"start":1727396363670,"stop":1727396364658,"duration":988}},{"uid":"f2004be90d1e9d3e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2129//#testresult/f2004be90d1e9d3e","status":"failed","statusDetails":"ValueError: min() iterable argument is empty","time":{"start":1727309885519,"stop":1727309886668,"duration":1149}},{"uid":"9d288d61760282f1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2128//#testresult/9d288d61760282f1","status":"failed","statusDetails":"ValueError: min() iterable argument is empty","time":{"start":1727223512492,"stop":1727223513171,"duration":679}}]},"tags":[]},"source":"30cc8c75129cdbff.json","parameterValues":["MoleValleyDistrictCouncil"]}