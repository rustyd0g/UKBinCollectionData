{"uid":"2e794e8d6e981a7a","name":"Validate Council Output [GlasgowCityCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a2365ffeb3ba24c7926dc7b42b03858c","time":{"start":1728778621521,"stop":1728778623167,"duration":1646},"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f4347e9fa60>\nrequest = <FixtureRequest for <Function test_scenario_outline[GlasgowCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f4348b6d9d0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <GlasgowCityCouncil.CouncilClass object at 0x7f4347d4ea50>\npage = <Response [200]>\nkwargs = {'council_module_str': 'GlasgowCityCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en\">\n<head>\n<!-- Google tag (gtag.js) -->\n<script async=\"\" src=\"https://www.googletagman...=\"\" src=\"https://app-script.monsido.com/v2/monsido-script.js\" type=\"text/javascript\"></script>\n</form>\n</body>\n</html>\n\ndata = {'bins': []}\nbin_types = {'../images/bins/cal_ash.png': 'Ash bin', '../images/bins/cal_blue.png': 'Mixed recycling', '../images/bins/cal_brown.png': 'Organic waste', '../images/bins/cal_green.png': 'General waste', ...}\nbody = None\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Parse the page\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Declare an empty dict for data, and pair icon source URLs with their respective bin type\n        data = {\"bins\": []}\n        bin_types = {\n            \"../images/bins/cal_blue.png\": \"Mixed recycling\",\n            \"../images/bins/cal_green.png\": \"General waste\",\n            \"../images/bins/cal_grey.png\": \"Food waste\",\n            \"../images/bins/cal_brown.png\": \"Organic waste\",\n            \"../images/bins/cal_purple.png\": \"Glass\",\n            \"../images/bins/cal_ash.png\": \"Ash bin\",\n        }\n    \n        # Find the page body with all the calendars\n        body = soup.find(\"div\", {\"id\": \"printArticle\"})\n>       cal_year = datetime.strptime(soup.select(\"#Year\")[0].text.strip(), \"%Y\").year\nE       IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/GlasgowCityCouncil.py:31: IndexError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f4347e9fa60>\nrequest = <FixtureRequest for <Function test_scenario_outline[GlasgowCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f4348b6d9d0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <GlasgowCityCouncil.CouncilClass object at 0x7f4347d4ea50>\npage = <Response [200]>\nkwargs = {'council_module_str': 'GlasgowCityCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en\">\n<head>\n<!-- Google tag (gtag.js) -->\n<script async=\"\" src=\"https://www.googletagman...=\"\" src=\"https://app-script.monsido.com/v2/monsido-script.js\" type=\"text/javascript\"></script>\n</form>\n</body>\n</html>\n\ndata = {'bins': []}\nbin_types = {'../images/bins/cal_ash.png': 'Ash bin', '../images/bins/cal_blue.png': 'Mixed recycling', '../images/bins/cal_brown.png': 'Organic waste', '../images/bins/cal_green.png': 'General waste', ...}\nbody = None\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Parse the page\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Declare an empty dict for data, and pair icon source URLs with their respective bin type\n        data = {\"bins\": []}\n        bin_types = {\n            \"../images/bins/cal_blue.png\": \"Mixed recycling\",\n            \"../images/bins/cal_green.png\": \"General waste\",\n            \"../images/bins/cal_grey.png\": \"Food waste\",\n            \"../images/bins/cal_brown.png\": \"Organic waste\",\n            \"../images/bins/cal_purple.png\": \"Glass\",\n            \"../images/bins/cal_ash.png\": \"Ash bin\",\n        }\n    \n        # Find the page body with all the calendars\n        body = soup.find(\"div\", {\"id\": \"printArticle\"})\n>       cal_year = datetime.strptime(soup.select(\"#Year\")[0].text.strip(), \"%Y\").year\nE       IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/GlasgowCityCouncil.py:31: IndexError","steps":[{"name":"Given the council","time":{"start":1728778621521,"stop":1728778621522,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1728778621522,"stop":1728778623167,"duration":1645},"status":"failed","statusMessage":"list index out of range","statusTrace":"IndexError: list index out of range\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"261780bde97caf42","name":"stdout","source":"261780bde97caf42.txt","type":"text/plain","size":45}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az888-455"},{"name":"thread","value":"2792-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GlasgowCityCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":169,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":169},"items":[{"uid":"413116c78cb44ca1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2211//#testresult/413116c78cb44ca1","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728692548759,"stop":1728692550664,"duration":1905}},{"uid":"cf493bc0afadf3ee","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2210//#testresult/cf493bc0afadf3ee","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728605855317,"stop":1728605857135,"duration":1818}},{"uid":"c900035b3099d915","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2199//#testresult/c900035b3099d915","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728519450357,"stop":1728519452935,"duration":2578}},{"uid":"1e8b61ff369a203","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2188//#testresult/1e8b61ff369a203","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728432927464,"stop":1728432929455,"duration":1991}},{"uid":"1730ecfd6a647da6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2169//#testresult/1730ecfd6a647da6","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728332169400,"stop":1728332174445,"duration":5045}},{"uid":"79eede58d8554fb5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2165//#testresult/79eede58d8554fb5","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728259411153,"stop":1728259413442,"duration":2289}},{"uid":"5d0f48bca2c6154","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2164//#testresult/5d0f48bca2c6154","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728173675745,"stop":1728173677621,"duration":1876}},{"uid":"3d3ecf0edfe981c4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2160//#testresult/3d3ecf0edfe981c4","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728087134395,"stop":1728087136429,"duration":2034}},{"uid":"70dfd002d3a1262b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2152//#testresult/70dfd002d3a1262b","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728000740333,"stop":1728000741853,"duration":1520}},{"uid":"7d6e5397b766d19d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2148//#testresult/7d6e5397b766d19d","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727932813274,"stop":1727932815934,"duration":2660}},{"uid":"c688916ef1fc432a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2146//#testresult/c688916ef1fc432a","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727914627022,"stop":1727914628670,"duration":1648}},{"uid":"3d8a8b9671f79a95","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2139//#testresult/3d8a8b9671f79a95","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727828175898,"stop":1727828178105,"duration":2207}},{"uid":"11716dc58fcc6884","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2138//#testresult/11716dc58fcc6884","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727741815112,"stop":1727741816965,"duration":1853}},{"uid":"3a3fd494fec634cf","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2137//#testresult/3a3fd494fec634cf","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727655431291,"stop":1727655433345,"duration":2054}},{"uid":"fea135c4f63db5ce","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2136//#testresult/fea135c4f63db5ce","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727568890913,"stop":1727568893002,"duration":2089}},{"uid":"e4323afa0f914eca","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2135//#testresult/e4323afa0f914eca","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727482580323,"stop":1727482582330,"duration":2007}},{"uid":"84df76f559da986f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2131//#testresult/84df76f559da986f","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727422551360,"stop":1727422553849,"duration":2489}},{"uid":"281f6e8503ae2f30","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2130//#testresult/281f6e8503ae2f30","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727396300848,"stop":1727396302584,"duration":1736}},{"uid":"cb42bccd7d24f5ff","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2129//#testresult/cb42bccd7d24f5ff","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727309845872,"stop":1727309847556,"duration":1684}},{"uid":"603c2bea773dd2a0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2128//#testresult/603c2bea773dd2a0","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727223457687,"stop":1727223459299,"duration":1612}}]},"tags":[]},"source":"2e794e8d6e981a7a.json","parameterValues":["GlasgowCityCouncil"]}