{"uid":"97ac8718ecb6340a","name":"Validate Council Output [GlasgowCityCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a2365ffeb3ba24c7926dc7b42b03858c","time":{"start":1729209769667,"stop":1729209772070,"duration":2403},"status":"failed","statusMessage":"ValueError: time data 'today is Friday, 18 October 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f74f26afec0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GlasgowCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f75042a6450>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/GlasgowCityCouncil.py:40: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'today is Friday, 18 October 2024', format = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'today is Friday, 18 October 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/_strptime.py:333: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'today is Friday, 18 October 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f74f26afec0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GlasgowCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f75042a6450>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/GlasgowCityCouncil.py:40: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/_strptime.py:554: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'today is Friday, 18 October 2024', format = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'today is Friday, 18 October 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/_strptime.py:333: ValueError","steps":[{"name":"Given the council","time":{"start":1729209769667,"stop":1729209769668,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1729209769668,"stop":1729209772070,"duration":2402},"status":"failed","statusMessage":"time data 'today is Friday, 18 October 2024' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'today is Friday, 18 October 2024' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"7a6fc05d6cd744a6","name":"stdout","source":"7a6fc05d6cd744a6.txt","type":"text/plain","size":45}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az702-150"},{"name":"thread","value":"2845-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GlasgowCityCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":171,"broken":0,"skipped":0,"passed":5,"unknown":0,"total":176},"items":[{"uid":"5ef266c532e55c32","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2244//#testresult/5ef266c532e55c32","status":"passed","time":{"start":1729123472695,"stop":1729123475525,"duration":2830}},{"uid":"5d00dd7a967d23ec","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2242//#testresult/5d00dd7a967d23ec","status":"passed","time":{"start":1729111520360,"stop":1729111522271,"duration":1911}},{"uid":"d2909b48770f1918","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2237//#testresult/d2909b48770f1918","status":"passed","time":{"start":1729037067795,"stop":1729037071029,"duration":3234}},{"uid":"b8d04568600ee0a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2233//#testresult/b8d04568600ee0a","status":"passed","time":{"start":1728950668355,"stop":1728950670210,"duration":1855}},{"uid":"666144ff6d689397","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2228//#testresult/666144ff6d689397","status":"passed","time":{"start":1728876801477,"stop":1728876804020,"duration":2543}},{"uid":"e5122052c9689fc1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2227//#testresult/e5122052c9689fc1","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728864281622,"stop":1728864283866,"duration":2244}},{"uid":"2e794e8d6e981a7a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2214//#testresult/2e794e8d6e981a7a","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728778621521,"stop":1728778623167,"duration":1646}},{"uid":"413116c78cb44ca1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2211//#testresult/413116c78cb44ca1","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728692548759,"stop":1728692550664,"duration":1905}},{"uid":"cf493bc0afadf3ee","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2210//#testresult/cf493bc0afadf3ee","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728605855317,"stop":1728605857135,"duration":1818}},{"uid":"c900035b3099d915","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2199//#testresult/c900035b3099d915","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728519450357,"stop":1728519452935,"duration":2578}},{"uid":"1e8b61ff369a203","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2188//#testresult/1e8b61ff369a203","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728432927464,"stop":1728432929455,"duration":1991}},{"uid":"1730ecfd6a647da6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2169//#testresult/1730ecfd6a647da6","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728332169400,"stop":1728332174445,"duration":5045}},{"uid":"79eede58d8554fb5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2165//#testresult/79eede58d8554fb5","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728259411153,"stop":1728259413442,"duration":2289}},{"uid":"5d0f48bca2c6154","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2164//#testresult/5d0f48bca2c6154","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728173675745,"stop":1728173677621,"duration":1876}},{"uid":"3d3ecf0edfe981c4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2160//#testresult/3d3ecf0edfe981c4","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728087134395,"stop":1728087136429,"duration":2034}},{"uid":"70dfd002d3a1262b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2152//#testresult/70dfd002d3a1262b","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728000740333,"stop":1728000741853,"duration":1520}},{"uid":"7d6e5397b766d19d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2148//#testresult/7d6e5397b766d19d","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727932813274,"stop":1727932815934,"duration":2660}},{"uid":"c688916ef1fc432a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2146//#testresult/c688916ef1fc432a","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727914627022,"stop":1727914628670,"duration":1648}},{"uid":"3d8a8b9671f79a95","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2139//#testresult/3d8a8b9671f79a95","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727828175898,"stop":1727828178105,"duration":2207}},{"uid":"11716dc58fcc6884","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2138//#testresult/11716dc58fcc6884","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727741815112,"stop":1727741816965,"duration":1853}}]},"tags":[]},"source":"97ac8718ecb6340a.json","parameterValues":["GlasgowCityCouncil"]}