{"uid":"aabb7e8f542679f4","name":"Validate Council Output [NottinghamCityCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"d4f72ded7db85dcd7cecf3a5b5fd36e6","time":{"start":1728433329874,"stop":1728433331695,"duration":1821},"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7f5cc4b27ec0>\nrequest = <FixtureRequest for <Function test_scenario_outline[NottinghamCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f5cd770a5a0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/NottinghamCityCouncil.py:21: in parse_data\n    json_data = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f5cd7e80380>\ns = '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\\r\\n<htm...source you are looking for, and it cannot be displayed.</h3>\\r\\n </fieldset></div>\\r\\n</div>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7f5cc4b27ec0>\nrequest = <FixtureRequest for <Function test_scenario_outline[NottinghamCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f5cd770a5a0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/NottinghamCityCouncil.py:21: in parse_data\n    json_data = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f5cd7e80380>\ns = '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\\r\\n<htm...source you are looking for, and it cannot be displayed.</h3>\\r\\n </fieldset></div>\\r\\n</div>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.6/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError","steps":[{"name":"Given the council","time":{"start":1728433329874,"stop":1728433329875,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1728433329875,"stop":1728433331695,"duration":1820},"status":"failed","statusMessage":"Expecting value: line 1 column 1 (char 0)","statusTrace":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"42af5c27e53eb9ba","name":"stdout","source":"42af5c27e53eb9ba.txt","type":"text/plain","size":48}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az735-553"},{"name":"thread","value":"2796-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"NottinghamCityCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":23,"broken":0,"skipped":0,"passed":142,"unknown":0,"total":165},"items":[{"uid":"7b882e0dd05837b4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2169//#testresult/7b882e0dd05837b4","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1728333013847,"stop":1728333015480,"duration":1633}},{"uid":"33ea204a393829fa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2165//#testresult/33ea204a393829fa","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1728260835551,"stop":1728260837335,"duration":1784}},{"uid":"c43e97664a4a1eed","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2164//#testresult/c43e97664a4a1eed","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1728174168011,"stop":1728174169573,"duration":1562}},{"uid":"1d27b5e63e346aea","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2160//#testresult/1d27b5e63e346aea","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1728087361584,"stop":1728087363079,"duration":1495}},{"uid":"91d941e38297ac0a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2152//#testresult/91d941e38297ac0a","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1728001279175,"stop":1728001280676,"duration":1501}},{"uid":"a5742f6f9eccc7d6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2148//#testresult/a5742f6f9eccc7d6","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1727932911913,"stop":1727932913515,"duration":1602}},{"uid":"e89a8ee4966d1466","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2146//#testresult/e89a8ee4966d1466","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1727914723945,"stop":1727914725448,"duration":1503}},{"uid":"e11ed38b5859a555","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2139//#testresult/e11ed38b5859a555","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1727828275323,"stop":1727828276757,"duration":1434}},{"uid":"1e783920c4566efc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2138//#testresult/1e783920c4566efc","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1727741922104,"stop":1727741923582,"duration":1478}},{"uid":"d94a7429be282533","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2137//#testresult/d94a7429be282533","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1727655525062,"stop":1727655526790,"duration":1728}},{"uid":"f3fca3fe3c4ce418","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2136//#testresult/f3fca3fe3c4ce418","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1727569194102,"stop":1727569195714,"duration":1612}},{"uid":"4c1334e6c7cf9a6f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2135//#testresult/4c1334e6c7cf9a6f","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1727482753064,"stop":1727482754712,"duration":1648}},{"uid":"100da22a09fd2ada","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2131//#testresult/100da22a09fd2ada","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1727422639856,"stop":1727422641827,"duration":1971}},{"uid":"5c665a4b9d03d4d6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2130//#testresult/5c665a4b9d03d4d6","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1727396445431,"stop":1727396447223,"duration":1792}},{"uid":"e69c2e4543cd371c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2129//#testresult/e69c2e4543cd371c","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1727309919327,"stop":1727309921157,"duration":1830}},{"uid":"37022038e20e7924","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2128//#testresult/37022038e20e7924","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1727223576194,"stop":1727223577706,"duration":1512}},{"uid":"92f3050e300ca348","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2127//#testresult/92f3050e300ca348","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1727137223908,"stop":1727137225461,"duration":1553}},{"uid":"5c18502805d8fc03","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2126//#testresult/5c18502805d8fc03","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1727050907365,"stop":1727050908904,"duration":1539}},{"uid":"2c2ada9b4bf148d8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2125//#testresult/2c2ada9b4bf148d8","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1726964420960,"stop":1726964422465,"duration":1505}},{"uid":"b6522d6625ed7e5b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.12/2124//#testresult/b6522d6625ed7e5b","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1726878111343,"stop":1726878113175,"duration":1832}}]},"tags":[]},"source":"aabb7e8f542679f4.json","parameterValues":["NottinghamCityCouncil"]}