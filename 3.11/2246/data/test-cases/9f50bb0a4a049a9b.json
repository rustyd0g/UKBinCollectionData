{"uid":"9f50bb0a4a049a9b","name":"Validate Council Output [GlasgowCityCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a2365ffeb3ba24c7926dc7b42b03858c","time":{"start":1729209874340,"stop":1729209876536,"duration":2196},"status":"failed","statusMessage":"ValueError: time data 'today is Friday, 18 October 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f2b15065da0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GlasgowCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f2b14eee8d0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/GlasgowCityCouncil.py:40: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'today is Friday, 18 October 2024', format = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'today is Friday, 18 October 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'today is Friday, 18 October 2024' does not match format '%A, %d %B %Y'","statusTrace":"fixturefunc = <function scrape_step at 0x7f2b15065da0>\nrequest = <FixtureRequest for <Function test_scenario_outline[GlasgowCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f2b14eee8d0>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/GlasgowCityCouncil.py:40: in parse_data\n    bin_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'today is Friday, 18 October 2024', format = '%A, %d %B %Y'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'today is Friday, 18 October 2024' does not match format '%A, %d %B %Y'\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council","time":{"start":1729209874340,"stop":1729209874341,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1729209874341,"stop":1729209876536,"duration":2195},"status":"failed","statusMessage":"time data 'today is Friday, 18 October 2024' does not match format '%A, %d %B %Y'","statusTrace":"ValueError: time data 'today is Friday, 18 October 2024' does not match format '%A, %d %B %Y'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"f208e1a6189c34b7","name":"stdout","source":"f208e1a6189c34b7.txt","type":"text/plain","size":45}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az575-743"},{"name":"thread","value":"2862-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GlasgowCityCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":175,"broken":0,"skipped":0,"passed":181,"unknown":0,"total":356},"items":[{"uid":"68e0c3226d08abd7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2244//#testresult/68e0c3226d08abd7","status":"passed","time":{"start":1729123474252,"stop":1729123476041,"duration":1789}},{"uid":"3724e796c6bf1bb0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2242//#testresult/3724e796c6bf1bb0","status":"passed","time":{"start":1729111690577,"stop":1729111692466,"duration":1889}},{"uid":"47da826dd6098299","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2237//#testresult/47da826dd6098299","status":"passed","time":{"start":1729037068022,"stop":1729037071041,"duration":3019}},{"uid":"71d5e3535bd9f179","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2233//#testresult/71d5e3535bd9f179","status":"passed","time":{"start":1728950702276,"stop":1728950704082,"duration":1806}},{"uid":"772defd9d3c4a8df","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2228//#testresult/772defd9d3c4a8df","status":"passed","time":{"start":1728876801468,"stop":1728876803806,"duration":2338}},{"uid":"2103c7ad85272086","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2227//#testresult/2103c7ad85272086","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728864253024,"stop":1728864255712,"duration":2688}},{"uid":"68cedab23d46bb6f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2214//#testresult/68cedab23d46bb6f","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728778603214,"stop":1728778605714,"duration":2500}},{"uid":"696b4966a6436d08","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2211//#testresult/696b4966a6436d08","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728692233890,"stop":1728692236328,"duration":2438}},{"uid":"1282b8cbc7a0e7c8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2210//#testresult/1282b8cbc7a0e7c8","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728605762858,"stop":1728605765215,"duration":2357}},{"uid":"9a71a2cfce72dd7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2199//#testresult/9a71a2cfce72dd7","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728519753402,"stop":1728519755406,"duration":2004}},{"uid":"3eb6bb853c72926f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2188//#testresult/3eb6bb853c72926f","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728432927039,"stop":1728432929416,"duration":2377}},{"uid":"470adfd9475810a4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2169//#testresult/470adfd9475810a4","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728332149134,"stop":1728332151377,"duration":2243}},{"uid":"db185bb23dbafb2c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2165//#testresult/db185bb23dbafb2c","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728259410293,"stop":1728259412598,"duration":2305}},{"uid":"3cd577aa2d49dd6e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2164//#testresult/3cd577aa2d49dd6e","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728173023394,"stop":1728173025660,"duration":2266}},{"uid":"b4449f0544a675","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2160//#testresult/b4449f0544a675","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728086820235,"stop":1728086822417,"duration":2182}},{"uid":"b61a9da7deaedc7b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2152//#testresult/b61a9da7deaedc7b","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728000738179,"stop":1728000740147,"duration":1968}},{"uid":"4f9e848afbcb51bd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2148//#testresult/4f9e848afbcb51bd","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727932815686,"stop":1727932817418,"duration":1732}},{"uid":"39dc118692c16c0f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2146//#testresult/39dc118692c16c0f","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727914618218,"stop":1727914620215,"duration":1997}},{"uid":"bec1262b32d33d91","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2139//#testresult/bec1262b32d33d91","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727828198421,"stop":1727828200338,"duration":1917}},{"uid":"24ee9a873dfdf9b4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2138//#testresult/24ee9a873dfdf9b4","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727741896904,"stop":1727741898736,"duration":1832}}]},"tags":[]},"source":"9f50bb0a4a049a9b.json","parameterValues":["GlasgowCityCouncil"]}