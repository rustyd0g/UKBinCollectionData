{"uid":"6eb6b7b81ba26448","name":"Validate Council Output [GatesheadCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"3a7171e6de629587a3f0d32410302b35","time":{"start":1729210666750,"stop":1729210983728,"duration":316978},"status":"failed","statusMessage":"selenium.common.exceptions.WebDriverException: Message: Unable to route (DELETE) /session/c42105341fdb710624109b19205c2a31","statusTrace":"self = <GatesheadCouncil.CouncilClass object at 0x7f359cb2a490>, page = ''\nkwargs = {'council_module_str': 'GatesheadCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ndriver = <selenium.webdriver.remote.webdriver.WebDriver (session=\"c42105341fdb710624109b19205c2a31\")>\ndata = {'bins': []}, user_paon = 'Bracken Cottage', user_postcode = 'NE16 5LQ'\nweb_driver = 'http://localhost:4444', headless = True\naccept_button = <selenium.webdriver.remote.webelement.WebElement (session=\"c42105341fdb710624109b19205c2a31\", element=\"f.C70CFE22B7F74945045376BA75D75010.d.09A427495F76B5F760679832BB4E54B0.e.53\")>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        driver = None\n        try:\n            data = {\"bins\": []}\n            user_paon = kwargs.get(\"paon\")\n            user_postcode = kwargs.get(\"postcode\")\n            web_driver = kwargs.get(\"web_driver\")\n            headless = kwargs.get(\"headless\")\n            check_paon(user_paon)\n            check_postcode(user_postcode)\n    \n            # Create Selenium webdriver\n            driver = create_webdriver(web_driver, headless, None, __name__)\n            driver.get(\n                \"https://www.gateshead.gov.uk/article/3150/Bin-collection-day-checker\"\n            )\n    \n            accept_button = WebDriverWait(driver, 30).until(\n                EC.presence_of_element_located((By.NAME, \"acceptall\"))\n            )\n            accept_button.click()\n    \n            # Wait for the postcode field to appear then populate it\n            inputElement_postcode = WebDriverWait(driver, 30).until(\n                EC.presence_of_element_located(\n                    (By.ID, \"BINCOLLECTIONCHECKER_ADDRESSSEARCH_ADDRESSLOOKUPPOSTCODE\")\n                )\n            )\n            inputElement_postcode.send_keys(user_postcode)\n    \n            # Click search button\n            findAddress = WebDriverWait(driver, 10).until(\n                EC.presence_of_element_located(\n                    (By.ID, \"BINCOLLECTIONCHECKER_ADDRESSSEARCH_ADDRESSLOOKUPSEARCH\")\n                )\n            )\n            findAddress.click()\n    \n            # Wait for the 'Select address' dropdown to appear and select option matching the house name/number\n            WebDriverWait(driver, 10).until(\n                EC.element_to_be_clickable(\n                    (\n                        By.XPATH,\n                        \"//select[@id='BINCOLLECTIONCHECKER_ADDRESSSEARCH_ADDRESSLOOKUPADDRESS']//option[contains(., '\"\n                        + user_paon\n                        + \"')]\",\n                    )\n                )\n>           ).click()\n\nuk_bin_collection/uk_bin_collection/councils/GatesheadCouncil.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f359cc184d0>\nresponse = {'status': 500, 'value': '{\\n  \"value\": {\\n    \"message\": \"Unable to execute request for an existing session: java.uti...0)\\\\n\\\\tat org.openqa.selenium.grid.router.HandleSession.execute(HandleSession.java:181)\\\\n\\\\t... 20 more\\\\n\"\\n  }\\n}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Unable to execute request for an existing session: java.util.concurrent.TimeoutException\nE       Build info: version: '4.25.0', revision: '030fcf7918'\nE       System info: os.name: 'Linux', os.arch: 'amd64', os.version: '6.5.0-1025-azure', java.version: '17.0.12'\nE       Driver info: driver.version: unknown\nE       Stacktrace:\nE       java.lang.RuntimeException: Unable to execute request for an existing session: java.util.concurrent.TimeoutException\nE       Build info: version: '4.25.0', revision: '030fcf7918'\nE       System info: os.name: 'Linux', os.arch: 'amd64', os.version: '6.5.0-1025-azure', java.version: '17.0.12'\nE       Driver info: driver.version: unknown\nE       \tat org.openqa.selenium.grid.router.HandleSession.execute(HandleSession.java:208)\nE       \tat org.openqa.selenium.remote.http.Route$PredicatedRoute.handle(Route.java:397)\nE       \tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\nE       \tat org.openqa.selenium.remote.http.Route$CombinedRoute.handle(Route.java:360)\nE       \tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\nE       \tat org.openqa.selenium.grid.router.Router.execute(Router.java:87)\nE       \tat org.openqa.selenium.grid.web.EnsureSpecCompliantResponseHeaders.lambda$apply$0(EnsureSpecCompliantResponseHeaders.java:34)\nE       \tat org.openqa.selenium.remote.http.Filter$1.execute(Filter.java:63)\nE       \tat org.openqa.selenium.remote.http.Route$CombinedRoute.handle(Route.java:360)\nE       \tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\nE       \tat org.openqa.selenium.remote.AddWebDriverSpecHeaders.lambda$apply$0(AddWebDriverSpecHeaders.java:35)\nE       \tat org.openqa.selenium.remote.ErrorFilter.lambda$apply$0(ErrorFilter.java:44)\nE       \tat org.openqa.selenium.remote.http.Filter$1.execute(Filter.java:63)\nE       \tat org.openqa.selenium.remote.ErrorFilter.lambda$apply$0(ErrorFilter.java:44)\nE       \tat org.openqa.selenium.remote.http.Filter$1.execute(Filter.java:63)\nE       \tat org.openqa.selenium.netty.server.SeleniumHandler.lambda$channelRead0$0(SeleniumHandler.java:44)\nE       \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\nE       \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\nE       \tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\nE       \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\nE       \tat java.base/java.lang.Thread.run(Thread.java:840)\nE       Caused by: java.util.concurrent.TimeoutException\nE       \tat java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)\nE       \tat java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)\nE       \tat org.openqa.selenium.remote.http.jdk.JdkHttpClient.execute0(JdkHttpClient.java:401)\nE       \tat org.openqa.selenium.remote.http.AddSeleniumUserAgent.lambda$apply$0(AddSeleniumUserAgent.java:42)\nE       \tat org.openqa.selenium.remote.http.Filter.lambda$andFinally$1(Filter.java:55)\nE       \tat org.openqa.selenium.remote.http.jdk.JdkHttpClient.execute(JdkHttpClient.java:374)\nE       \tat org.openqa.selenium.remote.tracing.TracedHttpClient.execute(TracedHttpClient.java:54)\nE       \tat org.openqa.selenium.grid.web.ReverseProxyHandler.execute(ReverseProxyHandler.java:90)\nE       \tat org.openqa.selenium.grid.node.DefaultActiveSession.execute(DefaultActiveSession.java:62)\nE       \tat org.openqa.selenium.grid.node.local.SessionSlot.execute(SessionSlot.java:126)\nE       \tat org.openqa.selenium.grid.node.local.LocalNode.executeWebDriverCommand(LocalNode.java:633)\nE       \tat org.openqa.selenium.grid.node.ForwardWebDriverCommand.execute(ForwardWebDriverCommand.java:35)\nE       \tat org.openqa.selenium.remote.http.Route$PredicatedRoute.handle(Route.java:397)\nE       \tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\nE       \tat org.openqa.selenium.remote.tracing.SpanWrappedHttpHandler.execute(SpanWrappedHttpHandler.java:87)\nE       \tat org.openqa.selenium.remote.http.Filter$1.execute(Filter.java:63)\nE       \tat org.openqa.selenium.remote.http.Route$CombinedRoute.handle(Route.java:360)\nE       \tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\nE       \tat org.openqa.selenium.grid.node.Node.execute(Node.java:270)\nE       \tat org.openqa.selenium.grid.web.CombinedHandler.execute(CombinedHandler.java:55)\nE       \tat org.openqa.selenium.grid.web.RoutableHttpClientFactory$1.execute(RoutableHttpClientFactory.java:71)\nE       \tat org.openqa.selenium.grid.web.ReverseProxyHandler.execute(ReverseProxyHandler.java:90)\nE       \tat org.openqa.selenium.grid.router.HandleSession.execute(HandleSession.java:181)\nE       \t... 20 more\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function scrape_step at 0x7f359da4f560>\nrequest = <FixtureRequest for <Function test_scenario_outline[GatesheadCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f359d8df810>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/GatesheadCouncil.py:115: in parse_data\n    driver.quit()\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:476: in quit\n    self.execute(Command.QUIT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f359cc184d0>\nresponse = {'status': 404, 'value': '{\\n  \"value\": \"\\\\u002fsession\\\\u002fc42105341fdb710624109b19205c2a31\",\\n  \"message\": \"Unable...002fsession\\\\u002fc42105341fdb710624109b19205c2a31\",\\n  \"error\": \"org.openqa.selenium.UnsupportedCommandException\"\\n}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Unable to route (DELETE) /session/c42105341fdb710624109b19205c2a31\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.WebDriverException: Message: Unable to route (DELETE) /session/c42105341fdb710624109b19205c2a31","statusTrace":"self = <GatesheadCouncil.CouncilClass object at 0x7f359cb2a490>, page = ''\nkwargs = {'council_module_str': 'GatesheadCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ndriver = <selenium.webdriver.remote.webdriver.WebDriver (session=\"c42105341fdb710624109b19205c2a31\")>\ndata = {'bins': []}, user_paon = 'Bracken Cottage', user_postcode = 'NE16 5LQ'\nweb_driver = 'http://localhost:4444', headless = True\naccept_button = <selenium.webdriver.remote.webelement.WebElement (session=\"c42105341fdb710624109b19205c2a31\", element=\"f.C70CFE22B7F74945045376BA75D75010.d.09A427495F76B5F760679832BB4E54B0.e.53\")>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        driver = None\n        try:\n            data = {\"bins\": []}\n            user_paon = kwargs.get(\"paon\")\n            user_postcode = kwargs.get(\"postcode\")\n            web_driver = kwargs.get(\"web_driver\")\n            headless = kwargs.get(\"headless\")\n            check_paon(user_paon)\n            check_postcode(user_postcode)\n    \n            # Create Selenium webdriver\n            driver = create_webdriver(web_driver, headless, None, __name__)\n            driver.get(\n                \"https://www.gateshead.gov.uk/article/3150/Bin-collection-day-checker\"\n            )\n    \n            accept_button = WebDriverWait(driver, 30).until(\n                EC.presence_of_element_located((By.NAME, \"acceptall\"))\n            )\n            accept_button.click()\n    \n            # Wait for the postcode field to appear then populate it\n            inputElement_postcode = WebDriverWait(driver, 30).until(\n                EC.presence_of_element_located(\n                    (By.ID, \"BINCOLLECTIONCHECKER_ADDRESSSEARCH_ADDRESSLOOKUPPOSTCODE\")\n                )\n            )\n            inputElement_postcode.send_keys(user_postcode)\n    \n            # Click search button\n            findAddress = WebDriverWait(driver, 10).until(\n                EC.presence_of_element_located(\n                    (By.ID, \"BINCOLLECTIONCHECKER_ADDRESSSEARCH_ADDRESSLOOKUPSEARCH\")\n                )\n            )\n            findAddress.click()\n    \n            # Wait for the 'Select address' dropdown to appear and select option matching the house name/number\n            WebDriverWait(driver, 10).until(\n                EC.element_to_be_clickable(\n                    (\n                        By.XPATH,\n                        \"//select[@id='BINCOLLECTIONCHECKER_ADDRESSSEARCH_ADDRESSLOOKUPADDRESS']//option[contains(., '\"\n                        + user_paon\n                        + \"')]\",\n                    )\n                )\n>           ).click()\n\nuk_bin_collection/uk_bin_collection/councils/GatesheadCouncil.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f359cc184d0>\nresponse = {'status': 500, 'value': '{\\n  \"value\": {\\n    \"message\": \"Unable to execute request for an existing session: java.uti...0)\\\\n\\\\tat org.openqa.selenium.grid.router.HandleSession.execute(HandleSession.java:181)\\\\n\\\\t... 20 more\\\\n\"\\n  }\\n}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Unable to execute request for an existing session: java.util.concurrent.TimeoutException\nE       Build info: version: '4.25.0', revision: '030fcf7918'\nE       System info: os.name: 'Linux', os.arch: 'amd64', os.version: '6.5.0-1025-azure', java.version: '17.0.12'\nE       Driver info: driver.version: unknown\nE       Stacktrace:\nE       java.lang.RuntimeException: Unable to execute request for an existing session: java.util.concurrent.TimeoutException\nE       Build info: version: '4.25.0', revision: '030fcf7918'\nE       System info: os.name: 'Linux', os.arch: 'amd64', os.version: '6.5.0-1025-azure', java.version: '17.0.12'\nE       Driver info: driver.version: unknown\nE       \tat org.openqa.selenium.grid.router.HandleSession.execute(HandleSession.java:208)\nE       \tat org.openqa.selenium.remote.http.Route$PredicatedRoute.handle(Route.java:397)\nE       \tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\nE       \tat org.openqa.selenium.remote.http.Route$CombinedRoute.handle(Route.java:360)\nE       \tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\nE       \tat org.openqa.selenium.grid.router.Router.execute(Router.java:87)\nE       \tat org.openqa.selenium.grid.web.EnsureSpecCompliantResponseHeaders.lambda$apply$0(EnsureSpecCompliantResponseHeaders.java:34)\nE       \tat org.openqa.selenium.remote.http.Filter$1.execute(Filter.java:63)\nE       \tat org.openqa.selenium.remote.http.Route$CombinedRoute.handle(Route.java:360)\nE       \tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\nE       \tat org.openqa.selenium.remote.AddWebDriverSpecHeaders.lambda$apply$0(AddWebDriverSpecHeaders.java:35)\nE       \tat org.openqa.selenium.remote.ErrorFilter.lambda$apply$0(ErrorFilter.java:44)\nE       \tat org.openqa.selenium.remote.http.Filter$1.execute(Filter.java:63)\nE       \tat org.openqa.selenium.remote.ErrorFilter.lambda$apply$0(ErrorFilter.java:44)\nE       \tat org.openqa.selenium.remote.http.Filter$1.execute(Filter.java:63)\nE       \tat org.openqa.selenium.netty.server.SeleniumHandler.lambda$channelRead0$0(SeleniumHandler.java:44)\nE       \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\nE       \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\nE       \tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\nE       \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\nE       \tat java.base/java.lang.Thread.run(Thread.java:840)\nE       Caused by: java.util.concurrent.TimeoutException\nE       \tat java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)\nE       \tat java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)\nE       \tat org.openqa.selenium.remote.http.jdk.JdkHttpClient.execute0(JdkHttpClient.java:401)\nE       \tat org.openqa.selenium.remote.http.AddSeleniumUserAgent.lambda$apply$0(AddSeleniumUserAgent.java:42)\nE       \tat org.openqa.selenium.remote.http.Filter.lambda$andFinally$1(Filter.java:55)\nE       \tat org.openqa.selenium.remote.http.jdk.JdkHttpClient.execute(JdkHttpClient.java:374)\nE       \tat org.openqa.selenium.remote.tracing.TracedHttpClient.execute(TracedHttpClient.java:54)\nE       \tat org.openqa.selenium.grid.web.ReverseProxyHandler.execute(ReverseProxyHandler.java:90)\nE       \tat org.openqa.selenium.grid.node.DefaultActiveSession.execute(DefaultActiveSession.java:62)\nE       \tat org.openqa.selenium.grid.node.local.SessionSlot.execute(SessionSlot.java:126)\nE       \tat org.openqa.selenium.grid.node.local.LocalNode.executeWebDriverCommand(LocalNode.java:633)\nE       \tat org.openqa.selenium.grid.node.ForwardWebDriverCommand.execute(ForwardWebDriverCommand.java:35)\nE       \tat org.openqa.selenium.remote.http.Route$PredicatedRoute.handle(Route.java:397)\nE       \tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\nE       \tat org.openqa.selenium.remote.tracing.SpanWrappedHttpHandler.execute(SpanWrappedHttpHandler.java:87)\nE       \tat org.openqa.selenium.remote.http.Filter$1.execute(Filter.java:63)\nE       \tat org.openqa.selenium.remote.http.Route$CombinedRoute.handle(Route.java:360)\nE       \tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\nE       \tat org.openqa.selenium.grid.node.Node.execute(Node.java:270)\nE       \tat org.openqa.selenium.grid.web.CombinedHandler.execute(CombinedHandler.java:55)\nE       \tat org.openqa.selenium.grid.web.RoutableHttpClientFactory$1.execute(RoutableHttpClientFactory.java:71)\nE       \tat org.openqa.selenium.grid.web.ReverseProxyHandler.execute(ReverseProxyHandler.java:90)\nE       \tat org.openqa.selenium.grid.router.HandleSession.execute(HandleSession.java:181)\nE       \t... 20 more\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function scrape_step at 0x7f359da4f560>\nrequest = <FixtureRequest for <Function test_scenario_outline[GatesheadCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f359d8df810>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/GatesheadCouncil.py:115: in parse_data\n    driver.quit()\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:476: in quit\n    self.execute(Command.QUIT)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f359cc184d0>\nresponse = {'status': 404, 'value': '{\\n  \"value\": \"\\\\u002fsession\\\\u002fc42105341fdb710624109b19205c2a31\",\\n  \"message\": \"Unable...002fsession\\\\u002fc42105341fdb710624109b19205c2a31\",\\n  \"error\": \"org.openqa.selenium.UnsupportedCommandException\"\\n}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Unable to route (DELETE) /session/c42105341fdb710624109b19205c2a31\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","steps":[{"name":"Given the council","time":{"start":1729210666750,"stop":1729210666750,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1729210666751,"stop":1729210983728,"duration":316977},"status":"failed","statusMessage":"Message: Unable to route (DELETE) /session/c42105341fdb710624109b19205c2a31\n","statusTrace":"selenium.common.exceptions.WebDriverException: Message: Unable to route (DELETE) /session/c42105341fdb710624109b19205c2a31\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"decabc3799730827","name":"stdout","source":"decabc3799730827.txt","type":"text/plain","size":4379}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az575-743"},{"name":"thread","value":"2853-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GatesheadCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":177,"broken":0,"skipped":0,"passed":33,"unknown":0,"total":210},"items":[{"uid":"e802f05cc09ecfeb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2244//#testresult/e802f05cc09ecfeb","status":"passed","time":{"start":1729124316888,"stop":1729124337257,"duration":20369}},{"uid":"5ef322fbc7b706f9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2242//#testresult/5ef322fbc7b706f9","status":"passed","time":{"start":1729111656232,"stop":1729111690229,"duration":33997}},{"uid":"cbc2a98446d53814","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2237//#testresult/cbc2a98446d53814","status":"passed","time":{"start":1729037966205,"stop":1729037998950,"duration":32745}},{"uid":"101b639295f7908f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2233//#testresult/101b639295f7908f","status":"passed","time":{"start":1728951612881,"stop":1728951642190,"duration":29309}},{"uid":"fdac1ea2670d6693","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2227//#testresult/fdac1ea2670d6693","status":"passed","time":{"start":1728865135692,"stop":1728865164934,"duration":29242}},{"uid":"2282ef4eae5988c3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2214//#testresult/2282ef4eae5988c3","status":"passed","time":{"start":1728778536178,"stop":1728778602859,"duration":66681}},{"uid":"2fd9d344d00c4b7a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2211//#testresult/2fd9d344d00c4b7a","status":"passed","time":{"start":1728692168698,"stop":1728692233611,"duration":64913}},{"uid":"25a097be6500fa37","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2210//#testresult/25a097be6500fa37","status":"passed","time":{"start":1728605731352,"stop":1728605762687,"duration":31335}},{"uid":"38d3f501603aec9","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2199//#testresult/38d3f501603aec9","status":"failed","statusDetails":"selenium.common.exceptions.WebDriverException: Message: Unable to route (DELETE) /session/0faccc54494dea3588b0747ae7802cb5","time":{"start":1728519408397,"stop":1728519753019,"duration":344622}},{"uid":"541e086a12210fd4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2188//#testresult/541e086a12210fd4","status":"passed","time":{"start":1728432897077,"stop":1728432926823,"duration":29746}},{"uid":"1b46d074b2b6ae51","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2169//#testresult/1b46d074b2b6ae51","status":"passed","time":{"start":1728332048965,"stop":1728332148732,"duration":99767}},{"uid":"efecf6e54be3ce7a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2165//#testresult/efecf6e54be3ce7a","status":"failed","statusDetails":"selenium.common.exceptions.WebDriverException: Message: Unable to route (DELETE) /session/0f956b8eeb0b5ca632c079df2190df31","time":{"start":1728260415685,"stop":1728260736305,"duration":320620}},{"uid":"69507e1b37fb7be2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2164//#testresult/69507e1b37fb7be2","status":"passed","time":{"start":1728174018676,"stop":1728174051259,"duration":32583}},{"uid":"7f461d80e2631bf7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2160//#testresult/7f461d80e2631bf7","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55ec0ce0413a <unknown>\n#1 0x55ec0caea5e0 <unknown>\n#2 0x55ec0cb39be8 <unknown>\n#3 0x55ec0cb39e81 <unknown>\n#4 0x55ec0cb808c4 <unknown>\n#5 0x55ec0cb5eb4d <unknown>\n#6 0x55ec0cb7dd7d <unknown>\n#7 0x55ec0cb5e8c3 <unknown>\n#8 0x55ec0cb2c6b3 <unknown>\n#9 0x55ec0cb2d68e <unknown>\n#10 0x55ec0cdceb3b <unknown>\n#11 0x55ec0cdd2ac1 <unknown>\n#12 0x55ec0cdbb335 <unknown>\n#13 0x55ec0cdd3642 <unknown>\n#14 0x55ec0cda049f <unknown>\n#15 0x55ec0cdf3038 <unknown>\n#16 0x55ec0cdf3203 <unknown>\n#17 0x55ec0ce02f8c <unknown>\n#18 0x7fa64d878a94 <unknown>\n#19 0x7fa64d905a34 __clone","time":{"start":1728087247817,"stop":1728087302536,"duration":54719}},{"uid":"9ba1dc49fe34dcc7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2157//#testresult/9ba1dc49fe34dcc7","status":"failed","statusDetails":"selenium.common.exceptions.WebDriverException: Message: Unable to route (DELETE) /session/cc3f5a37e54a715169c36d3df07544a5","time":{"start":1728057195403,"stop":1728057499588,"duration":304185}},{"uid":"89a3228c2111cb6d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2152//#testresult/89a3228c2111cb6d","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x56535060a13a <unknown>\n#1 0x5653502f05e0 <unknown>\n#2 0x56535033fbe8 <unknown>\n#3 0x56535033fe81 <unknown>\n#4 0x5653503868c4 <unknown>\n#5 0x565350364b4d <unknown>\n#6 0x565350383d7d <unknown>\n#7 0x5653503648c3 <unknown>\n#8 0x5653503326b3 <unknown>\n#9 0x56535033368e <unknown>\n#10 0x5653505d4b3b <unknown>\n#11 0x5653505d8ac1 <unknown>\n#12 0x5653505c1335 <unknown>\n#13 0x5653505d9642 <unknown>\n#14 0x5653505a649f <unknown>\n#15 0x5653505f9038 <unknown>\n#16 0x5653505f9203 <unknown>\n#17 0x565350608f8c <unknown>\n#18 0x7fca43be2a94 <unknown>\n#19 0x7fca43c6fa34 __clone","time":{"start":1728001172990,"stop":1728001243040,"duration":70050}},{"uid":"4a3b63ab1ad64cfd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2148//#testresult/4a3b63ab1ad64cfd","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5590ee6d813a <unknown>\n#1 0x5590ee3be5e0 <unknown>\n#2 0x5590ee40dbe8 <unknown>\n#3 0x5590ee40de81 <unknown>\n#4 0x5590ee4548c4 <unknown>\n#5 0x5590ee432b4d <unknown>\n#6 0x5590ee451d7d <unknown>\n#7 0x5590ee4328c3 <unknown>\n#8 0x5590ee4006b3 <unknown>\n#9 0x5590ee40168e <unknown>\n#10 0x5590ee6a2b3b <unknown>\n#11 0x5590ee6a6ac1 <unknown>\n#12 0x5590ee68f335 <unknown>\n#13 0x5590ee6a7642 <unknown>\n#14 0x5590ee67449f <unknown>\n#15 0x5590ee6c7038 <unknown>\n#16 0x5590ee6c7203 <unknown>\n#17 0x5590ee6d6f8c <unknown>\n#18 0x7fea170b5a94 <unknown>\n#19 0x7fea17142a34 __clone","time":{"start":1727932720087,"stop":1727932815514,"duration":95427}},{"uid":"6115a5e2396e7303","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2146//#testresult/6115a5e2396e7303","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55e6e049813a <unknown>\n#1 0x55e6e017e5e0 <unknown>\n#2 0x55e6e01cdbe8 <unknown>\n#3 0x55e6e01cde81 <unknown>\n#4 0x55e6e02148c4 <unknown>\n#5 0x55e6e01f2b4d <unknown>\n#6 0x55e6e0211d7d <unknown>\n#7 0x55e6e01f28c3 <unknown>\n#8 0x55e6e01c06b3 <unknown>\n#9 0x55e6e01c168e <unknown>\n#10 0x55e6e0462b3b <unknown>\n#11 0x55e6e0466ac1 <unknown>\n#12 0x55e6e044f335 <unknown>\n#13 0x55e6e0467642 <unknown>\n#14 0x55e6e043449f <unknown>\n#15 0x55e6e0487038 <unknown>\n#16 0x55e6e0487203 <unknown>\n#17 0x55e6e0496f8c <unknown>\n#18 0x7fd4bc0e4a94 <unknown>\n#19 0x7fd4bc171a34 __clone","time":{"start":1727914522330,"stop":1727914618010,"duration":95680}},{"uid":"721fd5f42a6d4219","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2139//#testresult/721fd5f42a6d4219","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55a7d145513a <unknown>\n#1 0x55a7d113b5e0 <unknown>\n#2 0x55a7d118abe8 <unknown>\n#3 0x55a7d118ae81 <unknown>\n#4 0x55a7d11d18c4 <unknown>\n#5 0x55a7d11afb4d <unknown>\n#6 0x55a7d11ced7d <unknown>\n#7 0x55a7d11af8c3 <unknown>\n#8 0x55a7d117d6b3 <unknown>\n#9 0x55a7d117e68e <unknown>\n#10 0x55a7d141fb3b <unknown>\n#11 0x55a7d1423ac1 <unknown>\n#12 0x55a7d140c335 <unknown>\n#13 0x55a7d1424642 <unknown>\n#14 0x55a7d13f149f <unknown>\n#15 0x55a7d1444038 <unknown>\n#16 0x55a7d1444203 <unknown>\n#17 0x55a7d1453f8c <unknown>\n#18 0x7f966adf6a94 <unknown>\n#19 0x7f966ae83a34 __clone","time":{"start":1727828103039,"stop":1727828198084,"duration":95045}},{"uid":"194ee4d75d2c5b08","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2138//#testresult/194ee4d75d2c5b08","status":"failed","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55698288d13a <unknown>\n#1 0x5569825735e0 <unknown>\n#2 0x5569825c2be8 <unknown>\n#3 0x5569825c2e81 <unknown>\n#4 0x5569826098c4 <unknown>\n#5 0x5569825e7b4d <unknown>\n#6 0x556982606d7d <unknown>\n#7 0x5569825e78c3 <unknown>\n#8 0x5569825b56b3 <unknown>\n#9 0x5569825b668e <unknown>\n#10 0x556982857b3b <unknown>\n#11 0x55698285bac1 <unknown>\n#12 0x556982844335 <unknown>\n#13 0x55698285c642 <unknown>\n#14 0x55698282949f <unknown>\n#15 0x55698287c038 <unknown>\n#16 0x55698287c203 <unknown>\n#17 0x55698288bf8c <unknown>\n#18 0x7fa666a88a94 <unknown>\n#19 0x7fa666b15a34 __clone","time":{"start":1727741795689,"stop":1727741896483,"duration":100794}}]},"tags":[]},"source":"6eb6b7b81ba26448.json","parameterValues":["GatesheadCouncil"]}