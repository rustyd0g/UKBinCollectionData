{"uid":"b7c1ba135efc1b07","name":"Validate Council Output [MoleValleyDistrictCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"47d4fc200fdb123acdd0e48934223e47","time":{"start":1728605943408,"stop":1728605944227,"duration":819},"status":"failed","statusMessage":"ValueError: min() arg is an empty sequence","statusTrace":"fixturefunc = <function scrape_step at 0x7fa44bef6840>\nrequest = <FixtureRequest for <Function test_scenario_outline[MoleValleyDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fa44bd80c50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <MoleValleyDistrictCouncil.CouncilClass object at 0x7fa44b5f6090>\npage = ''\nkwargs = {'council_module_str': 'MoleValleyDistrictCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nuser_postcode = 'RH4 1SJ'\nroot_url = 'https://myproperty.molevalley.gov.uk/molevalley/api/live_addresses/RH4 1SJ?format=json'\nresponse = <Response [200]>\njsonData = {'count': 1, 'next': None, 'previous': None, 'results': {'features': [{'geometry': {'coordinates': [517012.0, 149823.0...orking, RH41SJ', 'blpu_parent_uprn': None, 'blpu_status': 'L', ...}, 'type': 'Feature'}], 'type': 'FeatureCollection'}}\nproperties_found = [{'geometry': {'coordinates': [517012.0, 149823.0], 'type': 'Point'}, 'id': 34460994, 'properties': {'address_string':...ouncil Offices, Reigate Road, Dorking, RH41SJ', 'blpu_parent_uprn': None, 'blpu_status': 'L', ...}, 'type': 'Feature'}]\nhtml_data = '\\n\\t<!-- Column 1 -->\\n\\t<div class=\"col-md-4\">\\n\\t\\t<div class=\"panel\">\\n\\t\\t\\t<!-- For consistency you way want to ...etsbox1.png\" width=\"150\"\\nheight=\"98\" style=\"border: 0;\" alt=\"CycleStreets\" /></a></p>\\n\\n\\n\\t\\t</div>\\n\\t</div>\\n\\t\\t'\nuprn = '200000171235'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n    \n        user_postcode = kwargs.get(\"postcode\")\n        check_postcode(user_postcode)\n    \n        root_url = \"https://myproperty.molevalley.gov.uk/molevalley/api/live_addresses/{}?format=json\".format(\n            user_postcode\n        )\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(root_url, verify=False)\n    \n        if not response.ok:\n            raise ValueError(\"Invalid server response code retreiving data.\")\n    \n        jsonData = response.json()\n    \n        if len(jsonData[\"results\"][\"features\"]) == 0:\n            raise ValueError(\"No collection data found for postcode provided.\")\n    \n        properties_found = jsonData[\"results\"][\"features\"]\n    \n        # If UPRN is provided, we can check a specific address.\n        html_data = None\n        uprn = kwargs.get(\"uprn\")\n        if uprn:\n            check_uprn(uprn)\n            for item in properties_found:\n                if uprn == str(int(item[\"properties\"][\"blpu_uprn\"])):\n                    html_data = item[\"properties\"][\"three_column_layout_html\"]\n                    break\n            if html_data is None:\n                raise ValueError(\"No collection data found for UPRN provided.\")\n        else:\n            # If UPRN not provided, just use the first result\n            html_data = properties_found[0][\"properties\"][\"three_column_layout_html\"]\n    \n        soup = BeautifulSoup(html_data, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n        all_collection_dates = []\n        regex_date = re.compile(r\".* ([\\d]+\\/[\\d]+\\/[\\d]+)\")\n        regex_additional_collection = re.compile(r\"We also collect (.*) on (.*) -\")\n    \n        # Search for the 'Bins and Recycling' panel\n        for panel in soup.select('div[class*=\"panel\"]'):\n            if panel.h2.text.strip() == \"Bins and Recycling\":\n    \n                # Gather the bin types and dates\n                for collection in panel.select(\"div > strong\"):\n                    bin_type = collection.text.strip()\n                    collection_string = collection.find_next(\"p\").text.strip()\n                    m = regex_date.match(collection_string)\n                    if m:\n                        collection_date = datetime.strptime(\n                            m.group(1), \"%d/%m/%Y\"\n                        ).date()\n                        data[\"bins\"].append(\n                            {\n                                \"type\": bin_type,\n                                \"collectionDate\": collection_date.strftime(\"%d/%m/%Y\"),\n                            }\n                        )\n                        all_collection_dates.append(collection_date)\n    \n                # Search for additional collections\n                for p in panel.select(\"p\"):\n                    m2 = regex_additional_collection.match(p.text.strip())\n                    if m2:\n                        bin_type = m2.group(1)\n                        if \"each collection day\" in m2.group(2):\n>                           collection_date = min(all_collection_dates)\nE                           ValueError: min() arg is an empty sequence\n\nuk_bin_collection/uk_bin_collection/councils/MoleValleyDistrictCouncil.py:90: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: min() arg is an empty sequence","statusTrace":"fixturefunc = <function scrape_step at 0x7fa44bef6840>\nrequest = <FixtureRequest for <Function test_scenario_outline[MoleValleyDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7fa44bd80c50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <MoleValleyDistrictCouncil.CouncilClass object at 0x7fa44b5f6090>\npage = ''\nkwargs = {'council_module_str': 'MoleValleyDistrictCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nuser_postcode = 'RH4 1SJ'\nroot_url = 'https://myproperty.molevalley.gov.uk/molevalley/api/live_addresses/RH4 1SJ?format=json'\nresponse = <Response [200]>\njsonData = {'count': 1, 'next': None, 'previous': None, 'results': {'features': [{'geometry': {'coordinates': [517012.0, 149823.0...orking, RH41SJ', 'blpu_parent_uprn': None, 'blpu_status': 'L', ...}, 'type': 'Feature'}], 'type': 'FeatureCollection'}}\nproperties_found = [{'geometry': {'coordinates': [517012.0, 149823.0], 'type': 'Point'}, 'id': 34460994, 'properties': {'address_string':...ouncil Offices, Reigate Road, Dorking, RH41SJ', 'blpu_parent_uprn': None, 'blpu_status': 'L', ...}, 'type': 'Feature'}]\nhtml_data = '\\n\\t<!-- Column 1 -->\\n\\t<div class=\"col-md-4\">\\n\\t\\t<div class=\"panel\">\\n\\t\\t\\t<!-- For consistency you way want to ...etsbox1.png\" width=\"150\"\\nheight=\"98\" style=\"border: 0;\" alt=\"CycleStreets\" /></a></p>\\n\\n\\n\\t\\t</div>\\n\\t</div>\\n\\t\\t'\nuprn = '200000171235'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n    \n        user_postcode = kwargs.get(\"postcode\")\n        check_postcode(user_postcode)\n    \n        root_url = \"https://myproperty.molevalley.gov.uk/molevalley/api/live_addresses/{}?format=json\".format(\n            user_postcode\n        )\n        requests.packages.urllib3.disable_warnings()\n        response = requests.get(root_url, verify=False)\n    \n        if not response.ok:\n            raise ValueError(\"Invalid server response code retreiving data.\")\n    \n        jsonData = response.json()\n    \n        if len(jsonData[\"results\"][\"features\"]) == 0:\n            raise ValueError(\"No collection data found for postcode provided.\")\n    \n        properties_found = jsonData[\"results\"][\"features\"]\n    \n        # If UPRN is provided, we can check a specific address.\n        html_data = None\n        uprn = kwargs.get(\"uprn\")\n        if uprn:\n            check_uprn(uprn)\n            for item in properties_found:\n                if uprn == str(int(item[\"properties\"][\"blpu_uprn\"])):\n                    html_data = item[\"properties\"][\"three_column_layout_html\"]\n                    break\n            if html_data is None:\n                raise ValueError(\"No collection data found for UPRN provided.\")\n        else:\n            # If UPRN not provided, just use the first result\n            html_data = properties_found[0][\"properties\"][\"three_column_layout_html\"]\n    \n        soup = BeautifulSoup(html_data, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n        all_collection_dates = []\n        regex_date = re.compile(r\".* ([\\d]+\\/[\\d]+\\/[\\d]+)\")\n        regex_additional_collection = re.compile(r\"We also collect (.*) on (.*) -\")\n    \n        # Search for the 'Bins and Recycling' panel\n        for panel in soup.select('div[class*=\"panel\"]'):\n            if panel.h2.text.strip() == \"Bins and Recycling\":\n    \n                # Gather the bin types and dates\n                for collection in panel.select(\"div > strong\"):\n                    bin_type = collection.text.strip()\n                    collection_string = collection.find_next(\"p\").text.strip()\n                    m = regex_date.match(collection_string)\n                    if m:\n                        collection_date = datetime.strptime(\n                            m.group(1), \"%d/%m/%Y\"\n                        ).date()\n                        data[\"bins\"].append(\n                            {\n                                \"type\": bin_type,\n                                \"collectionDate\": collection_date.strftime(\"%d/%m/%Y\"),\n                            }\n                        )\n                        all_collection_dates.append(collection_date)\n    \n                # Search for additional collections\n                for p in panel.select(\"p\"):\n                    m2 = regex_additional_collection.match(p.text.strip())\n                    if m2:\n                        bin_type = m2.group(1)\n                        if \"each collection day\" in m2.group(2):\n>                           collection_date = min(all_collection_dates)\nE                           ValueError: min() arg is an empty sequence\n\nuk_bin_collection/uk_bin_collection/councils/MoleValleyDistrictCouncil.py:90: ValueError","steps":[{"name":"Given the council","time":{"start":1728605943408,"stop":1728605943408,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false},{"name":"When we scrape the data from the council","time":{"start":1728605943409,"stop":1728605944227,"duration":818},"status":"failed","statusMessage":"min() arg is an empty sequence","statusTrace":"ValueError: min() arg is an empty sequence\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true}],"attachments":[{"uid":"5332a8513908c28f","name":"stdout","source":"5332a8513908c28f.txt","type":"text/plain","size":52}],"parameters":[],"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az1986-129"},{"name":"thread","value":"2819-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"MoleValleyDistrictCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":33,"broken":0,"skipped":0,"passed":136,"unknown":0,"total":169},"items":[{"uid":"a7f28a0284af66f5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2199//#testresult/a7f28a0284af66f5","status":"failed","statusDetails":"ValueError: min() arg is an empty sequence","time":{"start":1728519861541,"stop":1728519862555,"duration":1014}},{"uid":"b1c3fd514e22e726","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2188//#testresult/b1c3fd514e22e726","status":"failed","statusDetails":"ValueError: min() arg is an empty sequence","time":{"start":1728433009407,"stop":1728433010359,"duration":952}},{"uid":"86f707cab4a4d5c4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2169//#testresult/86f707cab4a4d5c4","status":"failed","statusDetails":"ValueError: min() arg is an empty sequence","time":{"start":1728332900734,"stop":1728332901720,"duration":986}},{"uid":"f7d76beeb570a65c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2165//#testresult/f7d76beeb570a65c","status":"failed","statusDetails":"ValueError: min() arg is an empty sequence","time":{"start":1728260330128,"stop":1728260330899,"duration":771}},{"uid":"8593f170c87eff08","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2164//#testresult/8593f170c87eff08","status":"failed","statusDetails":"ValueError: min() arg is an empty sequence","time":{"start":1728173952310,"stop":1728173953122,"duration":812}},{"uid":"3d16ce0bdaa54025","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2160//#testresult/3d16ce0bdaa54025","status":"failed","statusDetails":"ValueError: min() arg is an empty sequence","time":{"start":1728087333803,"stop":1728087334725,"duration":922}},{"uid":"df1dcec93bcef168","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2152//#testresult/df1dcec93bcef168","status":"failed","statusDetails":"ValueError: min() arg is an empty sequence","time":{"start":1728001260156,"stop":1728001260864,"duration":708}},{"uid":"d763c1bdb5a01e28","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2148//#testresult/d763c1bdb5a01e28","status":"failed","statusDetails":"ValueError: min() arg is an empty sequence","time":{"start":1727932859930,"stop":1727932860781,"duration":851}},{"uid":"c5bdfbbeb5dcdc0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2146//#testresult/c5bdfbbeb5dcdc0","status":"failed","statusDetails":"ValueError: min() arg is an empty sequence","time":{"start":1727914666457,"stop":1727914667304,"duration":847}},{"uid":"b31edc2ce39b4135","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2139//#testresult/b31edc2ce39b4135","status":"failed","statusDetails":"ValueError: min() arg is an empty sequence","time":{"start":1727828243046,"stop":1727828243891,"duration":845}},{"uid":"f11d7ba3f11a9718","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2138//#testresult/f11d7ba3f11a9718","status":"failed","statusDetails":"ValueError: min() arg is an empty sequence","time":{"start":1727741922096,"stop":1727741923203,"duration":1107}},{"uid":"b66c62187e477bff","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2137//#testresult/b66c62187e477bff","status":"failed","statusDetails":"ValueError: min() arg is an empty sequence","time":{"start":1727655458987,"stop":1727655459897,"duration":910}},{"uid":"5815d938ce35902c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2136//#testresult/5815d938ce35902c","status":"failed","statusDetails":"ValueError: min() arg is an empty sequence","time":{"start":1727569066850,"stop":1727569068013,"duration":1163}},{"uid":"156bf1341341819c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2135//#testresult/156bf1341341819c","status":"failed","statusDetails":"ValueError: min() arg is an empty sequence","time":{"start":1727482791244,"stop":1727482792005,"duration":761}},{"uid":"2a13519bc36e520e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2131//#testresult/2a13519bc36e520e","status":"failed","statusDetails":"ValueError: min() arg is an empty sequence","time":{"start":1727422632138,"stop":1727422633066,"duration":928}},{"uid":"ca0e3eb037917f13","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2130//#testresult/ca0e3eb037917f13","status":"failed","statusDetails":"ValueError: min() arg is an empty sequence","time":{"start":1727396360859,"stop":1727396361966,"duration":1107}},{"uid":"6b67494f1cf7753","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2129//#testresult/6b67494f1cf7753","status":"failed","statusDetails":"ValueError: min() arg is an empty sequence","time":{"start":1727309869535,"stop":1727309870493,"duration":958}},{"uid":"2adfce3f21e6348","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2128//#testresult/2adfce3f21e6348","status":"failed","statusDetails":"ValueError: min() arg is an empty sequence","time":{"start":1727223479918,"stop":1727223480618,"duration":700}},{"uid":"83dd0fc6618e1f0a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2127//#testresult/83dd0fc6618e1f0a","status":"failed","statusDetails":"ValueError: min() arg is an empty sequence","time":{"start":1727137125543,"stop":1727137126857,"duration":1314}},{"uid":"7045ae30fe2938f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2126//#testresult/7045ae30fe2938f","status":"failed","statusDetails":"ValueError: min() arg is an empty sequence","time":{"start":1727050724868,"stop":1727050725588,"duration":720}}]},"tags":[]},"source":"b7c1ba135efc1b07.json","parameterValues":["MoleValleyDistrictCouncil"]}