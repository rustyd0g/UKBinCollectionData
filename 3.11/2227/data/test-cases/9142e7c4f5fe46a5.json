{"uid":"9142e7c4f5fe46a5","name":"Validate Council Output [WestBerkshireCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"01e9aabe7c605fabcf00c630ea7946b4","time":{"start":1728865809021,"stop":1728865900418,"duration":91397},"status":"failed","statusMessage":"ValueError: time data 'October' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f912975eca0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f91295ead50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:77: in parse_data\n    rubbish_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'October', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'October' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/_strptime.py:349: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: time data 'October' does not match format '%d %B'","statusTrace":"fixturefunc = <function scrape_step at 0x7f912975eca0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WestBerkshireCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f91295ead50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/WestBerkshireCouncil.py:77: in parse_data\n    rubbish_date = datetime.strptime(\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/_strptime.py:567: in _strptime_datetime\n    tt, fraction, gmtoff_fraction = _strptime(data_string, format)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata_string = 'October', format = '%d %B'\n\n    def _strptime(data_string, format=\"%a %b %d %H:%M:%S %Y\"):\n        \"\"\"Return a 2-tuple consisting of a time struct and an int containing\n        the number of microseconds based on the input string and the\n        format string.\"\"\"\n    \n        for index, arg in enumerate([data_string, format]):\n            if not isinstance(arg, str):\n                msg = \"strptime() argument {} must be str, not {}\"\n                raise TypeError(msg.format(index, type(arg)))\n    \n        global _TimeRE_cache, _regex_cache\n        with _cache_lock:\n            locale_time = _TimeRE_cache.locale_time\n            if (_getlang() != locale_time.lang or\n                time.tzname != locale_time.tzname or\n                time.daylight != locale_time.daylight):\n                _TimeRE_cache = TimeRE()\n                _regex_cache.clear()\n                locale_time = _TimeRE_cache.locale_time\n            if len(_regex_cache) > _CACHE_MAX_SIZE:\n                _regex_cache.clear()\n            format_regex = _regex_cache.get(format)\n            if not format_regex:\n                try:\n                    format_regex = _TimeRE_cache.compile(format)\n                # KeyError raised when a bad format is found; can be specified as\n                # \\\\, in which case it was a stray % but with a space after it\n                except KeyError as err:\n                    bad_directive = err.args[0]\n                    if bad_directive == \"\\\\\":\n                        bad_directive = \"%\"\n                    del err\n                    raise ValueError(\"'%s' is a bad directive in format '%s'\" %\n                                        (bad_directive, format)) from None\n                # IndexError only occurs when the format string is \"%\"\n                except IndexError:\n                    raise ValueError(\"stray %% in format '%s'\" % format) from None\n                _regex_cache[format] = format_regex\n        found = format_regex.match(data_string)\n        if not found:\n>           raise ValueError(\"time data %r does not match format %r\" %\n                             (data_string, format))\nE           ValueError: time data 'October' does not match format '%d %B'\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/_strptime.py:349: ValueError","steps":[{"name":"Given the council","time":{"start":1728865809022,"stop":1728865809022,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1728865809022,"stop":1728865900418,"duration":91396},"status":"failed","statusMessage":"time data 'October' does not match format '%d %B'","statusTrace":"ValueError: time data 'October' does not match format '%d %B'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"3b1dd46da9545998","name":"stdout","source":"3b1dd46da9545998.txt","type":"text/plain","size":116}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1442-461"},{"name":"thread","value":"2778-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"WestBerkshireCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":43,"broken":0,"skipped":0,"passed":129,"unknown":0,"total":172},"items":[{"uid":"97268482f2e1b2d8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2214//#testresult/97268482f2e1b2d8","status":"passed","time":{"start":1728779489603,"stop":1728779534856,"duration":45253}},{"uid":"372adfe867d26988","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2211//#testresult/372adfe867d26988","status":"passed","time":{"start":1728692885714,"stop":1728692934391,"duration":48677}},{"uid":"bb1c01ea5f5469ba","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2210//#testresult/bb1c01ea5f5469ba","status":"passed","time":{"start":1728606751054,"stop":1728606777038,"duration":25984}},{"uid":"194f40ed697da1af","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2199//#testresult/194f40ed697da1af","status":"passed","time":{"start":1728520662937,"stop":1728520672378,"duration":9441}},{"uid":"82324523a83dcf8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2188//#testresult/82324523a83dcf8","status":"passed","time":{"start":1728433589763,"stop":1728433601596,"duration":11833}},{"uid":"f34a6cf62ee6f09d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2169//#testresult/f34a6cf62ee6f09d","status":"failed","statusDetails":"ValueError: time data 'October' does not match format '%d %B'","time":{"start":1728333754993,"stop":1728333766601,"duration":11608}},{"uid":"1724e1bcc1dc744e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2165//#testresult/1724e1bcc1dc744e","status":"failed","statusDetails":"ValueError: time data 'October' does not match format '%d %B'","time":{"start":1728261407538,"stop":1728261447272,"duration":39734}},{"uid":"ee86894c7405316d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2164//#testresult/ee86894c7405316d","status":"passed","time":{"start":1728174779373,"stop":1728174808476,"duration":29103}},{"uid":"4d27221f8122d79c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2160//#testresult/4d27221f8122d79c","status":"passed","time":{"start":1728088347054,"stop":1728088368380,"duration":21326}},{"uid":"bd02d178f0c3675f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2152//#testresult/bd02d178f0c3675f","status":"passed","time":{"start":1728001930291,"stop":1728001957928,"duration":27637}},{"uid":"99d6647d091592ad","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2148//#testresult/99d6647d091592ad","status":"passed","time":{"start":1727933623821,"stop":1727933636578,"duration":12757}},{"uid":"29a3e374301c6932","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2146//#testresult/29a3e374301c6932","status":"passed","time":{"start":1727915444375,"stop":1727915466490,"duration":22115}},{"uid":"e92158c04d387b3b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2139//#testresult/e92158c04d387b3b","status":"passed","time":{"start":1727829033380,"stop":1727829053038,"duration":19658}},{"uid":"3d152f360278193c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2138//#testresult/3d152f360278193c","status":"passed","time":{"start":1727742721929,"stop":1727742751243,"duration":29314}},{"uid":"9067f9046993e791","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2137//#testresult/9067f9046993e791","status":"failed","statusDetails":"ValueError: time data 'September' does not match format '%d %B'","time":{"start":1727656247169,"stop":1727656257225,"duration":10056}},{"uid":"54a9e9ec7dd1d2f4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2136//#testresult/54a9e9ec7dd1d2f4","status":"passed","time":{"start":1727569603113,"stop":1727569628504,"duration":25391}},{"uid":"c4989e06b2a5bee7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2135//#testresult/c4989e06b2a5bee7","status":"passed","time":{"start":1727483321769,"stop":1727483332586,"duration":10817}},{"uid":"3663fea41b193df5","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2131//#testresult/3663fea41b193df5","status":"passed","time":{"start":1727423426743,"stop":1727423476088,"duration":49345}},{"uid":"9757dd8f616c7b87","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2130//#testresult/9757dd8f616c7b87","status":"passed","time":{"start":1727397163757,"stop":1727397208098,"duration":44341}},{"uid":"8a081af597648bba","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2129//#testresult/8a081af597648bba","status":"passed","time":{"start":1727310444243,"stop":1727310658340,"duration":214097}}]},"tags":[]},"source":"9142e7c4f5fe46a5.json","parameterValues":["WestBerkshireCouncil"]}