{"uid":"2103c7ad85272086","name":"Validate Council Output [GlasgowCityCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a2365ffeb3ba24c7926dc7b42b03858c","time":{"start":1728864253024,"stop":1728864255712,"duration":2688},"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f25146c6d40>\nrequest = <FixtureRequest for <Function test_scenario_outline[GlasgowCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f251455ac90>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <GlasgowCityCouncil.CouncilClass object at 0x7f2514365250>\npage = <Response [200]>\nkwargs = {'council_module_str': 'GlasgowCityCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en\">\n<head>\n<!-- Google tag (gtag.js) -->\n<script async=\"\" src=\"https://www.googletagman...=\"\" src=\"https://app-script.monsido.com/v2/monsido-script.js\" type=\"text/javascript\"></script>\n</form>\n</body>\n</html>\n\ndata = {'bins': []}\nbin_types = {'../images/bins/cal_ash.png': 'Ash bin', '../images/bins/cal_blue.png': 'Mixed recycling', '../images/bins/cal_brown.png': 'Organic waste', '../images/bins/cal_green.png': 'General waste', ...}\nbody = None\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Parse the page\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Declare an empty dict for data, and pair icon source URLs with their respective bin type\n        data = {\"bins\": []}\n        bin_types = {\n            \"../images/bins/cal_blue.png\": \"Mixed recycling\",\n            \"../images/bins/cal_green.png\": \"General waste\",\n            \"../images/bins/cal_grey.png\": \"Food waste\",\n            \"../images/bins/cal_brown.png\": \"Organic waste\",\n            \"../images/bins/cal_purple.png\": \"Glass\",\n            \"../images/bins/cal_ash.png\": \"Ash bin\",\n        }\n    \n        # Find the page body with all the calendars\n        body = soup.find(\"div\", {\"id\": \"printArticle\"})\n>       cal_year = datetime.strptime(soup.select(\"#Year\")[0].text.strip(), \"%Y\").year\nE       IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/GlasgowCityCouncil.py:31: IndexError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7f25146c6d40>\nrequest = <FixtureRequest for <Function test_scenario_outline[GlasgowCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f251455ac90>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <GlasgowCityCouncil.CouncilClass object at 0x7f2514365250>\npage = <Response [200]>\nkwargs = {'council_module_str': 'GlasgowCityCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en\">\n<head>\n<!-- Google tag (gtag.js) -->\n<script async=\"\" src=\"https://www.googletagman...=\"\" src=\"https://app-script.monsido.com/v2/monsido-script.js\" type=\"text/javascript\"></script>\n</form>\n</body>\n</html>\n\ndata = {'bins': []}\nbin_types = {'../images/bins/cal_ash.png': 'Ash bin', '../images/bins/cal_blue.png': 'Mixed recycling', '../images/bins/cal_brown.png': 'Organic waste', '../images/bins/cal_green.png': 'General waste', ...}\nbody = None\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Parse the page\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Declare an empty dict for data, and pair icon source URLs with their respective bin type\n        data = {\"bins\": []}\n        bin_types = {\n            \"../images/bins/cal_blue.png\": \"Mixed recycling\",\n            \"../images/bins/cal_green.png\": \"General waste\",\n            \"../images/bins/cal_grey.png\": \"Food waste\",\n            \"../images/bins/cal_brown.png\": \"Organic waste\",\n            \"../images/bins/cal_purple.png\": \"Glass\",\n            \"../images/bins/cal_ash.png\": \"Ash bin\",\n        }\n    \n        # Find the page body with all the calendars\n        body = soup.find(\"div\", {\"id\": \"printArticle\"})\n>       cal_year = datetime.strptime(soup.select(\"#Year\")[0].text.strip(), \"%Y\").year\nE       IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/GlasgowCityCouncil.py:31: IndexError","steps":[{"name":"Given the council","time":{"start":1728864253024,"stop":1728864253025,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1728864253025,"stop":1728864255712,"duration":2687},"status":"failed","statusMessage":"list index out of range","statusTrace":"IndexError: list index out of range\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"b0858434dafb6e2f","name":"stdout","source":"b0858434dafb6e2f.txt","type":"text/plain","size":45}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1442-461"},{"name":"thread","value":"2781-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"GlasgowCityCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":174,"broken":0,"skipped":0,"passed":176,"unknown":0,"total":350},"items":[{"uid":"68cedab23d46bb6f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2214//#testresult/68cedab23d46bb6f","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728778603214,"stop":1728778605714,"duration":2500}},{"uid":"696b4966a6436d08","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2211//#testresult/696b4966a6436d08","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728692233890,"stop":1728692236328,"duration":2438}},{"uid":"1282b8cbc7a0e7c8","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2210//#testresult/1282b8cbc7a0e7c8","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728605762858,"stop":1728605765215,"duration":2357}},{"uid":"9a71a2cfce72dd7","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2199//#testresult/9a71a2cfce72dd7","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728519753402,"stop":1728519755406,"duration":2004}},{"uid":"3eb6bb853c72926f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2188//#testresult/3eb6bb853c72926f","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728432927039,"stop":1728432929416,"duration":2377}},{"uid":"470adfd9475810a4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2169//#testresult/470adfd9475810a4","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728332149134,"stop":1728332151377,"duration":2243}},{"uid":"db185bb23dbafb2c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2165//#testresult/db185bb23dbafb2c","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728259410293,"stop":1728259412598,"duration":2305}},{"uid":"3cd577aa2d49dd6e","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2164//#testresult/3cd577aa2d49dd6e","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728173023394,"stop":1728173025660,"duration":2266}},{"uid":"b4449f0544a675","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2160//#testresult/b4449f0544a675","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728086820235,"stop":1728086822417,"duration":2182}},{"uid":"b61a9da7deaedc7b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2152//#testresult/b61a9da7deaedc7b","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1728000738179,"stop":1728000740147,"duration":1968}},{"uid":"4f9e848afbcb51bd","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2148//#testresult/4f9e848afbcb51bd","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727932815686,"stop":1727932817418,"duration":1732}},{"uid":"39dc118692c16c0f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2146//#testresult/39dc118692c16c0f","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727914618218,"stop":1727914620215,"duration":1997}},{"uid":"bec1262b32d33d91","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2139//#testresult/bec1262b32d33d91","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727828198421,"stop":1727828200338,"duration":1917}},{"uid":"24ee9a873dfdf9b4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2138//#testresult/24ee9a873dfdf9b4","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727741896904,"stop":1727741898736,"duration":1832}},{"uid":"c25443233af71184","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2137//#testresult/c25443233af71184","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727655436662,"stop":1727655438274,"duration":1612}},{"uid":"e47c0e0d89bff5b2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2136//#testresult/e47c0e0d89bff5b2","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727569016184,"stop":1727569018135,"duration":1951}},{"uid":"e7646f129647a670","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2135//#testresult/e7646f129647a670","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727482627247,"stop":1727482629006,"duration":1759}},{"uid":"571b2d318e9297b0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2131//#testresult/571b2d318e9297b0","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727422611038,"stop":1727422612939,"duration":1901}},{"uid":"1a2b49ddf43e01a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2130//#testresult/1a2b49ddf43e01a","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727396296656,"stop":1727396298840,"duration":2184}},{"uid":"5f9e025ba571bd96","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.11/2129//#testresult/5f9e025ba571bd96","status":"failed","statusDetails":"IndexError: list index out of range","time":{"start":1727309824597,"stop":1727309826472,"duration":1875}}]},"tags":[]},"source":"2103c7ad85272086.json","parameterValues":["GlasgowCityCouncil"]}